{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "If I output my HTML as XML, I get the following fragment:\n \n<script language=\"javascript\"> \n//<![CDATA[\n \n\tdocument.write(\"&lt;waka&gt; this is some js generated text.\");\n \n//]]>//\n</script>\n \nI believe this is wrong. It should be:\n \n<script language=\"javascript\"> \n//<![CDATA[\n \n\tdocument.write(\"<waka> this is some js generated text.\");\n \n//]]>//\n</script>\n \nThis can be easily fixed in HtmlNode.cs by changing WriteTo as follows:\n \n        /// <summary>\n        /// Saves the current node to the specified TextWriter.\n        /// </summary>\n        /// <param name=\"outText\">The TextWriter to which you want to save.</param>\n        public void WriteTo(TextWriter outText)\n        {\n            WriteTo(outText, /*isCData=*/false);\n        }\n        \n        /// <summary>\n        /// Saves the current node to the specified TextWriter.\n        /// </summary>\n        /// <param name=\"outText\">The TextWriter to which you want to save.</param>\n        /// <param name=\"isCData\">Specifies if the node is enclosed within CDATA.</param>\n        public void WriteTo(TextWriter outText, bool isCData)\n        {\n            string html;\n            switch (_nodetype)\n            {\n                case HtmlNodeType.Comment:\n                    html = ((HtmlCommentNode) this).Comment;\n                    if (_ownerdocument.OptionOutputAsXml)\n                    {\n                        outText.Write(\"<!--\" + GetXmlComment((HtmlCommentNode) this) + \" -->\");\n                    }\n                    else\n                    {\n                        outText.Write(html);\n                    }\n                    break;\n \n                case HtmlNodeType.Document:\n                    if (_ownerdocument.OptionOutputAsXml)\n                    {\n                        outText.Write(\"<?xml version=\\\"1.0\\\" encoding=\\\"\" + _ownerdocument.GetOutEncoding().BodyName +\n                                      \"\\\"?>\");\n \n                        // check there is a root element\n                        if (_ownerdocument.DocumentNode.HasChildNodes)\n                        {\n                            int rootnodes = _ownerdocument.DocumentNode._childnodes.Count;\n                            if (rootnodes > 0)\n                            {\n                                HtmlNode xml = _ownerdocument.GetXmlDeclaration();\n                                if (xml != null)\n                                {\n                                    rootnodes --;\n                                }\n \n                                if (rootnodes > 1)\n                                {\n                                    if (_ownerdocument.OptionOutputUpperCase)\n                                    {\n                                        outText.Write(\"<SPAN>\");\n                                        WriteContentTo(outText);\n                                        outText.Write(\"</SPAN>\");\n                                    }\n                                    else\n                                    {\n                                        outText.Write(\"<span>\");\n                                        WriteContentTo(outText);\n                                        outText.Write(\"</span>\");\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    WriteContentTo(outText);\n                    break;\n \n                case HtmlNodeType.Text:\n                    html = ((HtmlTextNode) this).Text;\n                    if ((_ownerdocument.OptionOutputAsXml || _ownerdocument.OptionNormalizeHtmlEncoding) && !isCData)\n                    {\n                        outText.Write(HtmlDocument.HtmlEncode(html));\n                    }\n                    else\n                    {\n                        outText.Write(html);\n                    }\n                    break;\n \n                case HtmlNodeType.Element:\n                    string name;\n                    if (_ownerdocument.OptionOutputUpperCase)\n                    {\n                        name = Name.ToUpper();\n                    }\n                    else\n                    {\n                        name = Name;\n                    }\n \n                    if (_ownerdocument.OptionOutputOriginalCase)\n                        name = OriginalName;\n \n                    if (_ownerdocument.OptionOutputAsXml)\n                    {\n                        if (name.Length > 0)\n                        {\n                            if (name[0] == '?')\n                            {\n                                // forget this one, it's been done at the document level\n                                break;\n                            }\n \n                            if (name.Trim().Length == 0)\n                            {\n                                break;\n                            }\n                            name = HtmlDocument.GetXmlName(name);\n                        }\n                        else\n                        {\n                            break;\n                        }\n                    }\n \n                    outText.Write(\"<\" + name);\n                    WriteAttributes(outText, false);\n \n                    if (!HasChildNodes)\n                    {\n                        if (IsEmptyElement(Name))\n                        {\n                            if ((_ownerdocument.OptionWriteEmptyNodes) || (_ownerdocument.OptionOutputAsXml))\n                            {\n                                outText.Write(\" />\");\n                            }\n                            else\n                            {\n                                if (Name.Length > 0)\n                                {\n                                    if (Name[0] == '?')\n                                    {\n                                        outText.Write(\"?\");\n                                    }\n                                }\n \n                                outText.Write(\">\");\n                            }\n                        }\n                        else\n                        {\n                            outText.Write(\"></\" + name + \">\");\n                        }\n                    }\n                    else\n                    {\n                        outText.Write(\">\");\n                        bool cdata = false;\n                        if (_ownerdocument.OptionOutputAsXml)\n                        {\n                            if (IsCDataElement(Name))\n                            {\n                                // this code and the following tries to output things as nicely as possible for old browsers.\n                                cdata = true;\n                                outText.Write(\"\\r\\n//<![CDATA[\\r\\n\");\n                            }\n                        }\n \n                        if (cdata)\n                        {\n                            if (HasChildNodes)\n                            {\n                                // child must be a text\n                                ChildNodes[0].WriteTo(outText, /*isCData=*/true);\n                            }\n                            outText.Write(\"\\r\\n//]]>//\\r\\n\");\n                        }\n                        else\n                        {\n                            if (IsCDataElement(Name) && HasChildNodes)\n                            {\n                                ChildNodes[0].WriteTo(outText, /*isCData=*/true);\n                            }\n                            else\n                            {\n                                WriteContentTo(outText);\n                            }\n                        }\n \n                        outText.Write(\"</\" + name);\n                        if (!_ownerdocument.OptionOutputAsXml)\n                        {\n                            WriteAttributes(outText, true);\n                        }\n                        outText.Write(\">\");\n                    }\n                    break;\n            }\n        }",
    "LastUpdatedDate": "2013-02-21T18:47:10.38-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "htmlagilitypack",
    "ReportedDate": "2010-12-29T13:32:38.743-08:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Faulty CDATA encoding",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 29866
  },
  "FileAttachments": [],
  "Comments": []
}