diff -r c6350ca3b8d5 -r 91d0342faef5 HtmlAgilityPack20/HtmlAgilityPack/HtmlNode.cs
--- a/HtmlAgilityPack20/HtmlAgilityPack/HtmlNode.cs	Tue May 31 16:23:31 2011 -0400
+++ b/HtmlAgilityPack20/HtmlAgilityPack/HtmlNode.cs	Wed Mar 19 13:09:38 2014 -0400
@@ -1,6 +1,7 @@
 // HtmlAgilityPack V1.0 - Simon Mourier <simon underscore mourier at hotmail dot com>
 using System;
 using System.Collections;
+using System.Collections.Generic;
 using System.IO;
 using System.Text;
 using System.Xml;
@@ -140,6 +141,84 @@
 			return (((HtmlElementFlag)flag)&HtmlElementFlag.CanOverlap) != 0;
 		}
 
+
+		/// <summary>
+		/// Gets all Descendant nodes in enumerated list
+		/// </summary>
+		/// <returns></returns>
+		public IEnumerable<HtmlNode> Descendants()
+		{
+			foreach (HtmlNode node in DescendantsAndSelf())
+			{
+				if (node != this)
+				{
+					yield return node;
+				}
+			}
+		}
+
+		/// <summary>
+		/// Returns a collection of all descendant nodes of this element, in document order
+		/// </summary>
+		/// <returns></returns>
+		public IEnumerable<HtmlNode> DescendantsAndSelf()
+		{
+			foreach (var node in OpenClosedTraversal()) 
+			{
+				if (node is Open<HtmlNode>)
+				{
+					yield return node.Value;
+				}
+			}
+		}
+
+		private class State<T>
+		{
+			private readonly T value;
+
+			public State(T value)
+			{
+				this.value = value;
+			}
+
+			public T Value
+			{
+				get { return value; }
+			}
+		}
+
+		private class Open<T> : State<T> {
+			public Open(T value) : base(value) { }
+		}
+
+		private class Close<T> : State<T> {
+			public Close(T value) : base(value) { }
+		}
+
+		private IEnumerable<State<HtmlNode>> OpenClosedTraversal() {
+			HtmlNode current = this;
+			Dictionary<HtmlNode, bool> visitedNodes = new Dictionary<HtmlNode, bool>();
+
+			while (true) {
+				var visted = visitedNodes.ContainsKey(current);
+				if (!visted)
+				{
+					yield return new Open<HtmlNode>(current);
+					visitedNodes.Add(current, true);
+					current = (current.HasChildNodes ? current.ChildNodes[0] : current);
+				}
+				else
+                {
+					yield return new Close<HtmlNode>(current);
+					if (current == this) {
+						break;
+					}
+
+					current = (current.NextSibling != null ? current.NextSibling : current.ParentNode);
+				}
+			}
+		}
+
 		/// <summary>
 		/// Determines if a text corresponds to the closing tag of an node that can be kept overlapped.
 		/// </summary>
@@ -327,22 +406,20 @@
 		{
 			if (!_ownerdocument.OptionAutoCloseOnEnd)
 			{
-				// close all children
-				if (_childnodes != null)
+				foreach (HtmlNode node in Descendants())
 				{
-					foreach(HtmlNode child in _childnodes)
-					{
-						if (child.Closed)
-							continue;
-
-						// create a fake closer node
-						HtmlNode close = new HtmlNode(NodeType, _ownerdocument, -1);
-						close._endnode = close;
-						child.CloseNode(close);
-					}
+					// create a fake closer node
+					HtmlNode close = new HtmlNode(NodeType, _ownerdocument, -1);
+					close._endnode = close;
+					node.CloseNodeImpl(close);
 				}
 			}
 
+			CloseNodeImpl(endnode);
+		}
+
+		internal void CloseNodeImpl(HtmlNode endnode)
+		{
 			if (!Closed)
 			{
 				_endnode = endnode;
@@ -547,10 +624,7 @@
 			}
 		}
 
-		/// <summary>
-		/// Gets or Sets the text between the start and end tags of the object.
-		/// </summary>
-		public virtual string InnerText
+		private string InnerTextImpl
 		{
 			get
 			{
@@ -571,10 +645,26 @@
 					return string.Empty;
 				}
 
+				return null;
+			}
+		}
+
+		/// <summary>
+		/// Gets or Sets the text between the start and end tags of the object.
+		/// </summary>
+		public virtual string InnerText
+		{
+			get
+			{
+				var innerText = InnerTextImpl;
+				if (innerText != null) {
+					return innerText;
+				}
+
 				StringBuilder s = new StringBuilder();
-				foreach(HtmlNode node in ChildNodes)
+				foreach(HtmlNode node in Descendants())
 				{
-					s.Append(node.InnerText);
+					s.Append(node.InnerTextImpl);
 				}
 				return s.ToString();
 			}
@@ -1495,170 +1585,66 @@
 		/// <param name="outText">The TextWriter to which you want to save.</param>
 		public void WriteTo(TextWriter outText)
 		{
-			string html;
-			switch(_nodetype)
+			WriteTo(new TextNodeWriter(outText));
+		}
+
+		private class TextNodeWriter : NodeWriter
+		{
+			private readonly TextWriter writer;
+
+			public TextNodeWriter(TextWriter writer)
 			{
-				case HtmlNodeType.Comment:
-					html = ((HtmlCommentNode)this).Comment;
-					if (_ownerdocument.OptionOutputAsXml)
-					{
-						outText.Write("<!--" + GetXmlComment((HtmlCommentNode)this) + " -->");
-					}
-					else
-					{
-						outText.Write(html);
-					}
-					break;
+				this.writer = writer;
+			}
 
-				case HtmlNodeType.Document:
-					if (_ownerdocument.OptionOutputAsXml)
-					{
-						outText.Write("<?xml version=\"1.0\" encoding=\"" + _ownerdocument.GetOutEncoding().BodyName + "\"?>");
+			public void Open(HtmlNode node)
+			{
+				switch (node._nodetype)
+				{
+					case HtmlNodeType.Comment:
+						writer.Write(((HtmlCommentNode)node).Comment);
+						break;
 
-						// check there is a root element
-						if (_ownerdocument.DocumentNode.HasChildNodes)
-						{
-							int rootnodes = _ownerdocument.DocumentNode._childnodes.Count;
-							if (rootnodes > 0)
-							{
-								HtmlNode xml = _ownerdocument.GetXmlDeclaration();
-								if (xml != null)
-								{
-									rootnodes --;
-								}
+					case HtmlNodeType.Document:
+						break;
 
-								if (rootnodes > 1)
-								{
-									if (_ownerdocument.OptionOutputUpperCase)
-									{
-										outText.Write("<SPAN>");
-										WriteContentTo(outText);
-										outText.Write("</SPAN>");
-									}
-									else
-									{
-										outText.Write("<span>");
-										WriteContentTo(outText);
-										outText.Write("</span>");
-									}
-									break;
-								}
-							}
+					case HtmlNodeType.Text:
+						writer.Write(((HtmlTextNode)node).Text);
+						break;
+
+					case HtmlNodeType.Element:
+						writer.Write("<" + node.Name);
+						node.WriteAttributes(writer, false);
+						writer.Write(ShouldWriteEmpty(node) ? " />" : ">");
+						break;
+				}
+			}
+
+			public void Close(HtmlNode node)
+			{
+				switch (node._nodetype)
+				{
+					case HtmlNodeType.Comment:
+						break;
+
+					case HtmlNodeType.Document:
+						break;
+
+					case HtmlNodeType.Text:
+						break;
+
+					case HtmlNodeType.Element:
+						if (!ShouldWriteEmpty(node)) {
+							writer.Write("</" + node.Name + ">");
 						}
-					}
-					WriteContentTo(outText);
-					break;
+						
+						break;
+				}
+			}
 
-				case HtmlNodeType.Text:
-					html = ((HtmlTextNode)this).Text;
-					if (_ownerdocument.OptionOutputAsXml)
-					{
-						outText.Write(HtmlDocument.HtmlEncode(html));
-					}
-					else
-					{
-						outText.Write(html);
-					}
-					break;
-
-				case HtmlNodeType.Element:
-					string name;
-					if (_ownerdocument.OptionOutputUpperCase)
-					{
-						name = Name.ToUpper();
-					}
-					else
-					{
-						name = Name;
-					}
-
-					if (_ownerdocument.OptionOutputAsXml)
-					{
-						if (name.Length > 0)
-						{
-							if (name[0] == '?')
-							{
-								// forget this one, it's been done at the document level
-								break;
-							}
-
-							if (name.Trim().Length == 0)
-							{
-								break;
-							}
-							name = HtmlDocument.GetXmlName(name);
-						}
-						else
-						{
-							break;
-						}
-					}
-
-					outText.Write("<" + name);
-					WriteAttributes(outText, false);
-
-					if (!HasChildNodes)
-					{
-						if (HtmlNode.IsEmptyElement(Name))
-						{
-							if ((_ownerdocument.OptionWriteEmptyNodes) || (_ownerdocument.OptionOutputAsXml))
-							{
-								outText.Write(" />");
-							}
-							else
-							{
-								if (Name.Length > 0)
-								{
-									if (Name[0] == '?')
-									{
-										outText.Write("?");
-									}
-								}
-
-								outText.Write(">");
-							}
-						}
-						else
-						{
-							outText.Write("></" + name + ">");
-						}
-					}
-					else
-					{
-						outText.Write(">");
-						bool cdata = false;
-						if (_ownerdocument.OptionOutputAsXml)
-						{
-							if (HtmlNode.IsCDataElement(Name))
-							{
-								// this code and the following tries to output things as nicely as possible for old browsers.
-								cdata = true;
-								outText.Write("\r\n//<![CDATA[\r\n");
-							}
-						}
-
-						if (cdata)
-						{
-							if (HasChildNodes)
-							{
-								// child must be a text
-								ChildNodes[0].WriteTo(outText);
-							}
-							outText.Write("\r\n//]]>//\r\n");
-						}
-						else
-						{
-							WriteContentTo(outText);
-						}
-
-						outText.Write("</" + name);
-						if (!_ownerdocument.OptionOutputAsXml)
-						{
-							WriteAttributes(outText, true);
-						}
-						outText.Write(">");
-					}
-					break;
+			private bool ShouldWriteEmpty(HtmlNode node) 
+			{
+				return HtmlNode.IsEmptyElement(node.Name) && node._ownerdocument.OptionWriteEmptyNodes && !node.HasChildNodes;
 			}
 		}
 
@@ -1668,51 +1654,77 @@
 		/// <param name="writer">The XmlWriter to which you want to save.</param>
 		public void WriteTo(XmlWriter writer)
 		{
-			string html;
-			switch(_nodetype)
+			WriteTo(new XmlNodeWriter(writer));
+		}
+
+		private void WriteTo(NodeWriter writer) {
+			foreach (var tag in OpenClosedTraversal())
 			{
-				case HtmlNodeType.Comment:
-					writer.WriteComment(GetXmlComment((HtmlCommentNode)this));
-					break;
+				if (tag is Open<HtmlNode>)
+				{
+					writer.Open(tag.Value);
+				}
 
-				case HtmlNodeType.Document:
-					writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"" + _ownerdocument.GetOutEncoding().BodyName + "\"");
-					if (HasChildNodes)
-					{
-						foreach(HtmlNode subnode in ChildNodes)
-						{
-							subnode.WriteTo(writer);
-						}
-					}
-					break;
+				if (tag is Close<HtmlNode>)
+				{
+					writer.Close(tag.Value);
+				}
+			}
+		}
 
-				case HtmlNodeType.Text:
-					html = ((HtmlTextNode)this).Text;
-					writer.WriteString(html);
-					break;
+		private interface NodeWriter {
+			void Open(HtmlNode node);
+			void Close(HtmlNode node);
+		}
 
-				case HtmlNodeType.Element:
-					string name;
-					if (_ownerdocument.OptionOutputUpperCase)
-					{
-						name = Name.ToUpper();
-					}
-					else
-					{
-						name = Name;
-					}
-					writer.WriteStartElement(name);
-					WriteAttributes(writer, this);
+		private class XmlNodeWriter : NodeWriter {
+			private readonly XmlWriter writer;
 
-					if (HasChildNodes)
-					{
-						foreach(HtmlNode subnode in ChildNodes)
-						{
-							subnode.WriteTo(writer);
-						}
-					}
-					writer.WriteEndElement();
-					break;
+			public XmlNodeWriter(XmlWriter writer)
+			{
+				this.writer = writer;
+			}
+
+			public void Open(HtmlNode node)
+			{
+				switch(node._nodetype)
+				{
+					case HtmlNodeType.Comment:
+						writer.WriteComment(GetXmlComment((HtmlCommentNode)node));
+						break;
+
+					case HtmlNodeType.Document:
+						writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"" + node._ownerdocument.GetOutEncoding().BodyName + "\"");
+						break;
+
+					case HtmlNodeType.Text:
+						writer.WriteString(((HtmlTextNode)node).Text);
+						break;
+
+					case HtmlNodeType.Element:
+						writer.WriteStartElement(node.Name);
+						WriteAttributes(writer, node);
+						break;
+				}
+			}
+
+			public void Close(HtmlNode node)
+			{
+				switch (node._nodetype)
+				{
+					case HtmlNodeType.Comment:
+						break;
+
+					case HtmlNodeType.Document:
+						break;
+
+					case HtmlNodeType.Text:
+						break;
+
+					case HtmlNodeType.Element:
+						writer.WriteEndElement();
+						break;
+				}
 			}
 		}
 
