{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "When I remove an item from a parent node, the ordering of the children changes:\n \nThe following example replaces the less-than and greater-than signs with square brackets.  If you comment out the RemoveChild() line the ordering works ok:\n \n            String testhtml = \"<levelone>\\r\\n\"\n                + \"   <leveltwo>\\r\\n\"\n                + \"      <h1><levelthreepartone></levelthreepartone></h1>\\r\\n\"\n                + \"      <p><levelthreeparttwo></levelthreeparttwo></p>\\r\\n\"\n                + \"   </leveltwo>\\r\\n\"\n                + \"</levelone>\";\n \n            HtmlDocument doc = new HtmlDocument();\n            doc.LoadHtml(testhtml);\n \n            HtmlNodeCollection nodes = doc.DocumentNode.SelectNodes(\"//*\");\n \n            foreach (HtmlNode node in nodes)\n            {\n                HtmlNode parentnode = node.ParentNode;\n \n                HtmlTextNode textnode1 = node.OwnerDocument.CreateTextNode(\"[\"+node.Name+\"]\");\n                parentnode.InsertBefore(textnode1, node);\n \n                HtmlTextNode textnode2 = node.OwnerDocument.CreateTextNode(\"[/\" + node.Name + \"]\");\n                parentnode.InsertAfter(textnode2, node);\n \n                parentnode.RemoveChild(node, true);  // comment this out!\n \n            }\n            StringBuilder sb = new StringBuilder();\n            StringWriter sw = new StringWriter(sb);\n            HtmlTextWriter writer = new HtmlTextWriter(sw);\n            doc.Save(writer);\n            System.Console.Write(sb.ToString());\n \nNote that the lines with \"levelthreepartone\" and \"levelthreeparttwo\" get reversed.",
    "LastUpdatedDate": "2017-02-01T17:18:02.1-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Medium",
      "Severity": 100,
      "Id": 2
    },
    "ProjectName": "htmlagilitypack",
    "ReportedDate": "2007-03-23T09:16:04.25-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Ordering problem with RemoveChild",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 21,
    "Id": 9113
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I think the problem is in HtmlNode.RemoveChild(HtmlNode oldChild, bool keepGrandChildren).  It looks like the previous sibling is assigned only once, then everything gets inserted at that point.  This causes the order of the nodes to be reversed. \r\n\r\nThe current code is this:\r\n\r\n\t\t\tif ((oldChild._childnodes != null) && keepGrandChildren)\t\t\t{\t\t\t\t// get prev sibling\t\t\t\tHtmlNode prev = oldChild.PreviousSibling;\r\n\r\n\t\t\t\t// reroute grand children to ourselves\t\t\t\tforeach(HtmlNode grandchild in oldChild._childnodes)\t\t\t\t{\t\t\t\t\tInsertAfter(grandchild, prev);\t\t\t\t}\t\t\t}\t\t\tRemoveChild(oldChild);\r\n\r\nI think it should be this:\r\n\r\n      // get prev sibling      HtmlNode prev = oldChild.PreviousSibling;      if ((oldChild._childnodes != null) && keepGrandChildren)      {          // reroute grand children to ourselves          foreach (HtmlNode grandchild in oldChild.ChildNodes)          {            prev = InsertAfter(grandchild, prev);          }\r\n\r\n      }\r\n\r\n",
      "PostedDate": "2007-03-23T10:55:51.583-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-07-06T16:06:56.47-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-02-18T13:57:30.367-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-07-20T13:33:02.13-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Mike - You are a lifesaver! I ran into the exact same problem (grandchildren nodes being reversed). I can verify that your code fixes the issue.\r\n\r\nThank you!\r\n\r\nAdam",
      "PostedDate": "2009-07-20T13:34:23.647-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-08-18T03:30:15.983-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Thanks mike, your fix worked for me as well.\r\n\r\nI've put up fixed binaries here if somebody needs them:\r\nhttp://www.mediafire.com/?t5eadu70nc79z9w",
      "PostedDate": "2010-08-18T03:32:01.903-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-11-18T12:42:13.787-08:00",
      "Id": -2147483648
    },
    {
      "Message": "this is the same issue as http://htmlagilitypack.codeplex.com/workitem/28756",
      "PostedDate": "2010-11-18T12:42:32.1-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-11-18T15:48:27.277-08:00",
      "Id": -2147483648
    },
    {
      "Message": "The \"prev\" reference is unnecessary.  Looping backwards through the children and inserting after the parent works.  Here is the updated RemoveChild method.\r\n\r\n        public HtmlNode RemoveChild(HtmlNode oldChild, bool keepGrandChildren)\r\n        {\r\n            if (oldChild == null)\r\n            {\r\n                throw new ArgumentNullException(\"oldChild\");\r\n            }\r\n\r\n            if ((oldChild._childnodes != null) && keepGrandChildren)\r\n            {\r\n                // get prev sibling\r\n                //HtmlNode prev = oldChild.PreviousSibling;\r\n\t\t\t\tint count = oldChild._childnodes.Count;\r\n\r\n                // reroute grand children to ourselves\r\n\t\t\t\tfor (var i = count - 1; i >= 0; i--)\r\n\t\t\t\t{\r\n\t\t\t\t\t//looping through children backwards allows us to insert after the parent \r\n\t\t\t\t\t//and end up with the same node order\r\n\t\t\t\t\tHtmlNode grandchild = oldChild._childnodes[i];\r\n\t\t\t\t\t//InsertAfter(grandchild, prev);\r\n\t\t\t\t\tInsertAfter(grandchild, oldChild);\r\n\t\t\t\t}\r\n            }\r\n            RemoveChild(oldChild);\r\n            _outerchanged = true;\r\n            _innerchanged = true;\r\n            return oldChild;\r\n        }",
      "PostedDate": "2011-01-16T17:30:01.62-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-02-03T17:45:17.13-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-05-02T23:11:29.933-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Here's an example I used in a project to remove *span* tags without compiling my own modified version of HtmlAgilityPack:\r\n\r\n        public static void RemoveSpanTags(this HtmlDocument html)\r\n        {\r\n            var spanTags = html.DocumentNode.SelectNodes(\"//span\");\r\n\r\n            if (spanTags!=null)\r\n            {\r\n                foreach (var span in spanTags)\r\n                {\r\n                    if (!span.HasChildNodes)\r\n                    {\r\n                        span.ParentNode.RemoveChild(span);\r\n\r\n                        continue;\r\n                    }\r\n\r\n                    int count = span.ChildNodes.Count;\r\n\r\n                    for (var i = count - 1; i >= 0; i--)\r\n                    {\r\n                        var child = span.ChildNodes[i];\r\n\r\n                        span.ParentNode.InsertAfter(child, span);\r\n                    }\r\n\r\n                    span.ParentNode.RemoveChild(span);\r\n                }\r\n            }\r\n        }",
      "PostedDate": "2011-05-02T23:40:10.22-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Any reason not to apply the patch for 28756?",
      "PostedDate": "2011-09-10T15:38:16.157-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-09-15T11:00:51.467-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-02-20T07:23:32.363-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-09-04T20:05:11.517-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:47:28.933-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-06-03T09:27:29.637-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-08-10T03:44:30.74-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-10-29T14:55:14.14-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2014-03-19T11:12:39.28-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2014-12-03T12:36:15.14-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2014-12-04T02:25:07.337-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Sysmo posted code to fix this problem 4 years ago.\r\n\r\nWhy has this not been corrected yet?\r\n\r\nWhy is this also a Low impact?  Reordering the child nodes incorrect is bad.  When used to strip unwanted HTML from paragraphs and sentences, it reorders the sentences or words which totally messes up the original content.",
      "PostedDate": "2015-01-14T07:17:13.843-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2015-01-14T07:18:00.293-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2016-01-07T07:04:15.197-08:00",
      "Id": -2147483648
    },
    {
      "Message": "It would be really nice if the patch can be merged. We're similarly impacted by this bug as everyone else on this thread.",
      "PostedDate": "2017-01-10T02:25:08.343-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2017-01-25T08:28:36.867-08:00",
      "Id": -2147483648
    },
    {
      "Message": "This has been a bug in the library for 10 years. A fix was posted here 7 years ago by Sysmo. The bug still happens, please fix this.",
      "PostedDate": "2017-01-25T08:30:06.87-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Temporary fix without needing to recompile the library:\r\n\r\n/// <summary>\n        /// This is a workaround for a bug in HTMLAgilityPack that existed for 10 years:\n        /// http://htmlagilitypack.codeplex.com/workitem/9113\n        /// Effectively, the bug results in reversing the order of the grandchildren when using RemoveChild(node,true)\n        /// The workaround is creating a temporary node around the original one,\n        /// then running RemoveChild twice, reversing the order twice, effectively ending up with the correct order\n        /// </summary>\n        private void RemoveNodeWithoutMessingUpOrder(HtmlNode node, bool keepGrandChildren)\n        {\n            if (!keepGrandChildren)\n            {\n                node.ParentNode.RemoveChild(node);\n                return;\n            }\r\n\r\n            var superparent = node.ParentNode;\n            if (superparent == null)\n            {\n                superparent = htmlDocument.DocumentNode;\n            }\r\n\r\n            HtmlNode tempparent = htmlDocument.CreateElement(\"x-temp\");\n            tempparent.AppendChild(node);\n            superparent.ReplaceChild(tempparent, node);\r\n\r\n            tempparent.RemoveChild(node, true);\n            superparent.RemoveChild(tempparent, true);\n        }",
      "PostedDate": "2017-01-26T02:54:38.327-08:00",
      "Id": -2147483648
    },
    {
      "Message": "@kori0129: nice solution.  Just be warned though, it's risky to use such a solution because if the base library fixes this bug, your code will break.",
      "PostedDate": "2017-01-26T07:41:22.47-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I have created a NuGet package that is a copy of this repo, except it has a [fix](https://github.com/bcjobs/htmlagilitypack/commit/52516dcd45313d6af8e5e295ec9b539111b3534a) in place for this bug using the code that @mikebridge suggested.\r\n\r\nhttps://www.nuget.org/packages/BCJobs.HtmlAgilityPack",
      "PostedDate": "2017-02-01T17:18:02.1-08:00",
      "Id": -2147483648
    }
  ]
}