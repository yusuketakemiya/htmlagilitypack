[
  {
    "Id": "206714",
    "ThreadId": "60980",
    "Html": "<p>I'm trying to figure out how to remove the &quot;\\n&quot; and &quot;\\r&quot; characters in a string that is pulled off a web page.&nbsp; I would greatly appreciate any help on this matter.</p>",
    "PostedDate": "2009-06-29T11:46:54.433-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206733",
    "ThreadId": "60980",
    "Html": "<p>var unformated = node.InnerText.Replace(Environment.Newline,&quot; &quot;);</p>\r\n<p>This will remove all \\n\\r combinations in the string. To do them individually just chain the replace node.InnerText.Replace(&quot;\\n&quot;,&quot; &quot;).Replace(&quot;\\r&quot;,&quot; &quot;); This will give you double spaces where they were together.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>var unformated = node.InnerText.Replace(Environment.Newline,<span style=\"color:#A31515\">&quot; &quot;</span>).Replace(<span style=\"color:#A31515\">&quot;\\n&quot;</span>,<span style=\"color:#A31515\">&quot; &quot;</span>).Replace(<span style=\"color:#A31515\">&quot;\\r&quot;</span>,<span style=\"color:#A31515\">&quot; &quot;</span>);\r\n</pre>\r\n</div>\r\n<p>Note: this is may not be performant way to do it, if you are processing lots of text (1meg+) it might be slow.</p>\r\n<p>&nbsp;</p>\r\n<p>If you are resaving it and HTML Agility Pack is adding the newlines back in, then it is probably making a new #text node for each one and you'll need to modify the save routine.</p>",
    "PostedDate": "2009-06-29T12:19:49.38-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206738",
    "ThreadId": "60980",
    "Html": "<p>That worked beautifully sir.&nbsp; Thanks for the help.</p>",
    "PostedDate": "2009-06-29T12:36:48.73-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216164",
    "ThreadId": "60980",
    "Html": "<p>Note that the method DarthObiwan suggested, will cause 3 individual calls to Replace(), each of which will go through node.InnerText. It's assumed that this code will be called &quot;frequently&quot;, because \\r and \\n is pretty common. Additionally if InnerText is large, this will cause poor performance.</p>\r\n<p>If you don't know how much text you would go through and replace newlines, I would suggest a seperate solution.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> StringReplaceChars( <span style=\"color:Blue\">string</span> input, <span style=\"color:Blue\">params</span> <span style=\"color:Blue\">char</span>[] toRemove )\r\n{\r\n    <span style=\"color:Blue\">if</span>( input == <span style=\"color:Blue\">null</span> || toRemove == <span style=\"color:Blue\">null</span> )\r\n    {\r\n        <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentNullException(input == <span style=\"color:Blue\">null</span> ? <span style=\"color:#A31515\">&quot;input&quot;</span> : <span style=\"color:#A31515\">&quot;toRemove&quot;</span>);\r\n    }\r\n\r\n    <span style=\"color:Blue\">if</span> (input.Length == 0 || toRemove.Length == 0)\r\n    {\r\n        <span style=\"color:Blue\">return</span> input;\r\n    }\r\n\r\n    StringBuilder bldr = <span style=\"color:Blue\">new</span> StringBuilder(input.Length);\r\n    <span style=\"color:Blue\">bool</span> skip = <span style=\"color:Blue\">false</span>;\r\n    <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; input.Length; i++)\r\n    {\r\n        skip = <span style=\"color:Blue\">false</span>;\r\n        <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> y = 0; y &lt; toRemove.Length; y++)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (input[i] == toRemove[y])\r\n            {\r\n                skip = <span style=\"color:Blue\">true</span>;\r\n                <span style=\"color:Blue\">break</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">if</span> (!skip)\r\n        {\r\n            bldr.Append(input[i]);\r\n        }\r\n    }\r\n\r\n    <span style=\"color:Blue\">return</span> bldr.ToString();\r\n}\r\n\r\n<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">bool</span> TryStringReplaceChars( <span style=\"color:Blue\">string</span> input, <span style=\"color:Blue\">out</span> <span style=\"color:Blue\">string</span> output, <span style=\"color:Blue\">params</span> <span style=\"color:Blue\">char</span>[] toRemove )\r\n{\r\n    output = <span style=\"color:Blue\">null</span>;\r\n\r\n    <span style=\"color:Blue\">if</span> (input == <span style=\"color:Blue\">null</span> || toRemove == <span style=\"color:Blue\">null</span>)\r\n    {\r\n        <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>;\r\n    }\r\n\r\n    <span style=\"color:Blue\">if</span> (input.Length == 0 || toRemove.Length == 0)\r\n    {\r\n        <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>;\r\n    }\r\n\r\n    StringBuilder bldr = <span style=\"color:Blue\">new</span> StringBuilder(input.Length);\r\n    <span style=\"color:Blue\">bool</span> skip = <span style=\"color:Blue\">false</span>;\r\n    <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; input.Length; i++)\r\n    {\r\n        skip = <span style=\"color:Blue\">false</span>;\r\n        <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> y = 0; y &lt; toRemove.Length; y++)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (input[i] == toRemove[y])\r\n            {\r\n                skip = <span style=\"color:Blue\">true</span>;\r\n                <span style=\"color:Blue\">break</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">if</span> (!skip)\r\n        {\r\n            bldr.Append(input[i]);\r\n        }\r\n    }\r\n\r\n    output = bldr.ToString();\r\n    <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>;\r\n}\r\n</pre>\r\n</div>\r\n<p>Example uses:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">char</span>[] badChars = <span style=\"color:Blue\">new</span> <span style=\"color:Blue\">char</span>[] { <span style=\"color:#A31515\">'\\n'</span>,<span style=\"color:#A31515\">'\\r'</span>};\r\n\r\n<span style=\"color:Blue\">string</span> text;\r\n<span style=\"color:Blue\">if</span>( !TryStringReplaceChars(<span style=\"color:#A31515\">&quot;Hello\\r\\nWorld&quot;</span>,<span style=\"color:Blue\">out</span> text, badChars) )\r\n{\r\n     <span style=\"color:Green\">// Skip this one.</span>\r\n}\r\n\r\n<span style=\"color:Green\">// ----------------------------------------------------</span>\r\n\r\n<span style=\"color:Blue\">string</span> text = <span style=\"color:Blue\">null</span>;\r\n<span style=\"color:Blue\">try</span>\r\n{\r\n    text = StringReplaceChars(<span style=\"color:#A31515\">&quot;Hello\\r\\nWorld&quot;</span>, badChars);\r\n}\r\n<span style=\"color:Blue\">catch</span>(ArgumentNullException ex) \r\n{\r\n    <span style=\"color:Green\">// handle exception.</span>\r\n} \r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-26T09:35:34.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216207",
    "ThreadId": "60980",
    "Html": "<p>Actually the String.Replace method is very efficient and much faster than any hand-rolled code. The replace method has been written to be a performant as possible. It actually is a wrapper around a native assembly. The real implementation is most likely written in C/C++ using pointers to make it very efficient. Even though StringBuilder is great for concatenating a large amount of text it still requires to create new objects in memory, and has to manage a large array of characters internally.</p>\r\n<p>I ran some tests and String.Replace runs about 7x faster. The file I used was 1.4mb and 24,988 lines long</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;<br><span style=\"color:Blue\">using</span> System.Collections.Generic;<br><span style=\"color:Blue\">using</span> System.Text;<br><span style=\"color:Blue\">using</span> System.Diagnostics;<br><span style=\"color:Blue\">using</span> System.IO;<br><span style=\"color:Blue\">namespace</span> StringReplaceTest<br>{<br>    <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> Program<br>    </span>{<br>        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">char</span>[] badChars = <span style=\"color:Blue\">new</span> <span style=\"color:Blue\">char</span>[] { <span style=\"color:#A31515\">'\\n'</span>, <span style=\"color:#A31515\">'\\r'</span> };<br><br>        <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> Main(<span style=\"color:Blue\">string</span>[] args)<br>        {<br>            <span style=\"color:Blue\">var</span> str = File.ReadAllText(<span style=\"color:#A31515\">&quot;FaxSetup.log&quot;</span>);<br>         <br>            ExecuteTest(<span style=\"color:#A31515\">&quot;Coolspin.Replace&quot;</span>, str, (x, y) =&gt; StringReplaceChars(x,y));<br>           <br>            ExecuteTest(<span style=\"color:#A31515\">&quot;String.Replace&quot;</span>, str, (x, y) =&gt; ReplacePlain(x,y));<br>            <br>            ExecuteTest(<span style=\"color:#A31515\">&quot;String.Replace Dynamic&quot;</span>, str, (x, y) =&gt; ReplacePlainDynamic(x, y));<br><br>            Console.ReadKey();<br>        }<br>        <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> ExecuteTest(<span style=\"color:Blue\">string</span> name, <span style=\"color:Blue\">string</span> str, Action&lt;<span style=\"color:Blue\">string</span>,<span style=\"color:Blue\">char</span>[]&gt; action)<br>        {<br>            Console.WriteLine();<br>            Console.WriteLine(<span style=\"color:#A31515\">&quot;-------{0}--------&quot;</span>,name);<br>            System.Diagnostics.Stopwatch watch = <span style=\"color:Blue\">new</span> System.Diagnostics.Stopwatch();<br>            <span style=\"color:Blue\">int</span> i;<br>            watch.Start();<br>            <span style=\"color:Blue\">for</span> (i=0; i &lt;= 100; i++)<br>            {<br>                action.Invoke(str, badChars);<br>            }<br>            watch.Stop();<br>            Console.WriteLine(<span style=\"color:#A31515\">&quot;Time Elapsed: {0}&quot;</span>, watch.Elapsed);<br>        }<br>  <br>        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> StringReplaceChars(<span style=\"color:Blue\">string</span> input, <span style=\"color:Blue\">params</span> <span style=\"color:Blue\">char</span>[] toRemove)<br>        {<br>            <span style=\"color:Blue\">if</span> (input == <span style=\"color:Blue\">null</span> || toRemove == <span style=\"color:Blue\">null</span>)<br>            {<br>                <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentNullException(input == <span style=\"color:Blue\">null</span> ? <span style=\"color:#A31515\">&quot;input&quot;</span> : <span style=\"color:#A31515\">&quot;toRemove&quot;</span>);<br>            }<br><br>            <span style=\"color:Blue\">if</span> (input.Length == 0 || toRemove.Length == 0)<br>            {<br>                <span style=\"color:Blue\">return</span> input;<br>            }<br><br>            StringBuilder bldr = <span style=\"color:Blue\">new</span> StringBuilder(input.Length);<br>            <span style=\"color:Blue\">bool</span> skip = <span style=\"color:Blue\">false</span>;<br>            <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; input.Length; i++)<br>            {<br>                skip = <span style=\"color:Blue\">false</span>;<br>                <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> y = 0; y &lt; toRemove.Length; y++)<br>                {<br>                    <span style=\"color:Blue\">if</span> (input[i] == toRemove[y])<br>                    {<br>                        skip = <span style=\"color:Blue\">true</span>;<br>                        <span style=\"color:Blue\">break</span>;<br>                    }<br>                }<br><br>                <span style=\"color:Blue\">if</span> (!skip)<br>                {<br>                    bldr.Append(input[i]);<br>                }<br>            }<br><br>            <span style=\"color:Blue\">return</span> bldr.ToString();<br>        }<br><br>        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> ReplacePlain(<span style=\"color:Blue\">string</span> input, <span style=\"color:Blue\">params</span> <span style=\"color:Blue\">char</span>[] toRemove)<br>        {<br>            <span style=\"color:Blue\">return</span> input.Replace(toRemove[0], <span style=\"color:#A31515\">' '</span>).Replace(toRemove[1], <span style=\"color:#A31515\">' '</span>);<br>        }<br>        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> ReplacePlainDynamic(<span style=\"color:Blue\">string</span> input, <span style=\"color:Blue\">params</span> <span style=\"color:Blue\">char</span>[] toRemove)<br>        {<br>            <span style=\"color:Blue\">for</span>(<span style=\"color:Blue\">int</span> i = 0; i&lt;toRemove.Length; i++)<br>             input =  input.Replace(toRemove[i], <span style=\"color:#A31515\">' '</span>);<br><br>            <span style=\"color:Blue\">return</span> input;<br>        }<br>    }<br>}<br></pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-26T13:12:10.287-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "218479",
    "ThreadId": "60980",
    "Html": "<p>I made two revision changes.&nbsp;I also added \\t to the badChars, and modified your ReplacePlain to reflect that.</p>\r\n<p>I also added some functions Wget to apply this test on any website. Also added some code to put the results into csv-format, so we can make nice pretty graphs in Excel.</p>\r\n<p>I also copied C:\\WINDOWS\\WindowsUpdate.log to C:\\WINDOWS\\WindowsUpdate2.log, because File.ReadAllText() throws an exception trying read it.</p>\r\n<p>File sizes:</p>\r\n<ul>\r\n<li>WindowsUpdate2.log - 1,82 MB (1 915 812 bytes)</li>\r\n</ul>\r\n<p>String replace \\t \\n \\r benchmark results in Seconds on WindowsUpdate2.log only.</p>\r\n<p><a title=\"String replace \\t \\n \\r benchmarking in Seconds (1,82 MB data)\" href=\"http://bildr.no/view/460303\"><img src=\"http://bildr.no/image/460303.jpeg\" alt=\"String replace \\t \\n \\r benchmarking in Seconds (1.82 MB data)\"></a></p>\r\n<p>&nbsp;</p>\r\n<p>The code:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n<span style=\"color:Blue\">using</span> System.Diagnostics;\r\n<span style=\"color:Blue\">using</span> System.IO;\r\n\r\n<span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> ObiwanStringTest\r\n</span>{\r\n    <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> Wget( <span style=\"color:Blue\">string</span> url )\r\n    {\r\n        <span style=\"color:Blue\">try</span>\r\n        {\r\n            <span style=\"color:Blue\">using</span> (System.Net.WebClient wc = <span style=\"color:Blue\">new</span> System.Net.WebClient())\r\n            {\r\n                <span style=\"color:Blue\">return</span> wc.DownloadString(url);\r\n            }\r\n        }\r\n        <span style=\"color:Blue\">catch</span> (System.Net.WebException wex)\r\n        {\r\n            Console.WriteLine(<span style=\"color:#A31515\">&quot;Error downloading - returning String.Empty: \\r\\nURL: '{0}' \\r\\nError: {1}&quot;</span>, url, wex.Message);\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">string</span>.Empty;\r\n        }\r\n    }\r\n\r\n    <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">char</span>[] badChars = <span style=\"color:Blue\">new</span> <span style=\"color:Blue\">char</span>[] { <span style=\"color:#A31515\">'\\n'</span>, <span style=\"color:#A31515\">'\\r'</span>, <span style=\"color:#A31515\">'\\t'</span> };\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> Main()\r\n    {\r\n        <span style=\"color:Blue\">var</span> str =\r\n            <span style=\"color:Green\">//File.ReadAllText(&quot;C:\\\\WINDOWS\\\\FaxSetup.log&quot;)</span>\r\n            <span style=\"color:Green\">//+</span>\r\n            File.ReadAllText(<span style=\"color:#A31515\">&quot;C:\\\\WINDOWS\\\\WindowsUpdate2.log&quot;</span>)\r\n            <span style=\"color:Green\">//+ wget(&quot;http://www.example.com/&quot;)</span>\r\n            ;\r\n\r\n        <span style=\"color:Blue\">int</span> newLine = 0, carriageReturn = 0, tab = 0, total = 0, lowerAscii = 0;\r\n        <span style=\"color:Blue\">foreach</span> (<span style=\"color:Blue\">char</span> c <span style=\"color:Blue\">in</span> str)\r\n        {\r\n            total++;\r\n\r\n            <span style=\"color:Blue\">if</span> (c == <span style=\"color:#A31515\">'\\n'</span>)\r\n                newLine++;\r\n            <span style=\"color:Blue\">else</span> <span style=\"color:Blue\">if</span> (c == <span style=\"color:#A31515\">'\\r'</span>)\r\n                carriageReturn++;\r\n            <span style=\"color:Blue\">else</span> <span style=\"color:Blue\">if</span> (c == <span style=\"color:#A31515\">'\\t'</span>)\r\n                tab++;\r\n\r\n            <span style=\"color:Blue\">if</span> (c &gt;= 0x00 &amp;&amp; c &lt;= 0x1F)\r\n                lowerAscii++;\r\n        }\r\n\r\n        <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">string</span> fmt = <span style=\"color:#A31515\">&quot;{0,9:N0}&quot;</span>;\r\n\r\n        Console.WriteLine(<span style=\"color:#A31515\">&quot;Data stats:&quot;</span>);\r\n        Console.WriteLine();\r\n        Console.WriteLine(<span style=\"color:#A31515\">&quot;NewLine.........(\\\\n): &quot;</span> + fmt, newLine);\r\n        Console.WriteLine(<span style=\"color:#A31515\">&quot;CarriageReturn..(\\\\r): &quot;</span> + fmt, carriageReturn);\r\n        Console.WriteLine(<span style=\"color:#A31515\">&quot;Tabulator.......(\\\\t): &quot;</span> + fmt, tab);\r\n        Console.WriteLine(<span style=\"color:#A31515\">&quot;Other Lower ASCII...: &quot;</span> + fmt, (lowerAscii-(newLine+carriageReturn+tab)));\r\n        Console.WriteLine(<span style=\"color:#A31515\">&quot;Total characters....: &quot;</span> + fmt, total);\r\n\r\n        <span style=\"color:Blue\">if</span> (!File.Exists(benchTicks))\r\n            File.Create(benchTicks).Close();\r\n\r\n        <span style=\"color:Blue\">if</span> (!File.Exists(benchMsec))\r\n            File.Create(benchMsec).Close();\r\n\r\n        <span style=\"color:Blue\">if</span> (!File.Exists(benchSec))\r\n            File.Create(benchSec).Close();\r\n\r\n\r\n        ExecuteTest(<span style=\"color:#A31515\">&quot;Coolspin.Replace #1&quot;</span>, str, ( x, y ) =&gt; StringReplaceChars(x, y));\r\n\r\n        ExecuteTest(<span style=\"color:#A31515\">&quot;Coolspin.Replace #2&quot;</span>, str, ( x, y ) =&gt; StringReplaceChars2(x, y));\r\n\r\n        ExecuteTest(<span style=\"color:#A31515\">&quot;Coolspin.Replace #3&quot;</span>, str, ( x, y ) =&gt; StringReplaceChars3(x, y));\r\n\r\n        ExecuteTest(<span style=\"color:#A31515\">&quot;String.Replace(String,String)&quot;</span>, str, ( x, y ) =&gt; ReplaceStringPlain(x, y));\r\n\r\n        ExecuteTest(<span style=\"color:#A31515\">&quot;String.Replace(Char,Char)&quot;</span>, str, ( x, y ) =&gt; ReplacePlain(x, y));\r\n\r\n        ExecuteTest(<span style=\"color:#A31515\">&quot;String.Replace Dynamic(Char,Char)&quot;</span>, str, ( x, y ) =&gt; ReplacePlainDynamic(x, y));\r\n\r\n        File.WriteAllText(benchTicks, File.ReadAllText(benchTicks) + Environment.NewLine);\r\n        File.WriteAllText(benchMsec, File.ReadAllText(benchMsec) + Environment.NewLine);\r\n        File.WriteAllText(benchSec, File.ReadAllText(benchSec) + Environment.NewLine);\r\n\r\n        MakeCsv(benchTicks);\r\n        MakeCsv(benchMsec);\r\n        MakeCsv(benchSec);\r\n        Console.WriteLine(<span style=\"color:#A31515\">&quot;May the force be with you...&quot;</span>);\r\n        Console.ReadKey();\r\n    }\r\n\r\n    <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> MakeCsv( <span style=\"color:Blue\">string</span> file )\r\n    {\r\n        List&lt;<span style=\"color:Blue\">string</span>&gt; content = <span style=\"color:Blue\">new</span> List&lt;<span style=\"color:Blue\">string</span>&gt;();\r\n        content.Add(<span style=\"color:#A31515\">&quot;;&quot;</span> + <span style=\"color:Blue\">string</span>.Join(<span style=\"color:#A31515\">&quot;;&quot;</span>, functions.ToArray()));\r\n\r\n        <span style=\"color:Blue\">int</span> counter = 1;\r\n        <span style=\"color:Blue\">foreach</span> (<span style=\"color:Blue\">string</span> line <span style=\"color:Blue\">in</span> File.ReadAllLines(file))\r\n        {\r\n            <span style=\"color:Blue\">if</span> (!line.StartsWith(<span style=\"color:#A31515\">&quot;Run&quot;</span>))\r\n                content.Add(<span style=\"color:#A31515\">&quot;Run #&quot;</span> + counter + (line[0] != <span style=\"color:#A31515\">';'</span> ? <span style=\"color:#A31515\">&quot;;&quot;</span> + line : line));\r\n            counter++;\r\n        }\r\n\r\n        File.WriteAllLines(Path.GetFileNameWithoutExtension(file) + <span style=\"color:#A31515\">&quot;.pretty.csv&quot;</span>, content.ToArray());\r\n    }\r\n\r\n    <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> benchTicks = <span style=\"color:#A31515\">&quot;bench.ticks.csv&quot;</span>;\r\n    <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> benchMsec = <span style=\"color:#A31515\">&quot;bench.ms.csv&quot;</span>;\r\n    <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> benchSec = <span style=\"color:#A31515\">&quot;bench.sec.csv&quot;</span>;\r\n    <span style=\"color:Blue\">static</span> List&lt;<span style=\"color:Blue\">string</span>&gt; functions = <span style=\"color:Blue\">new</span> List&lt;<span style=\"color:Blue\">string</span>&gt;();\r\n\r\n    <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> ExecuteTest( <span style=\"color:Blue\">string</span> name, <span style=\"color:Blue\">string</span> str, Action&lt;<span style=\"color:Blue\">string</span>, <span style=\"color:Blue\">char</span>[]&gt; action )\r\n    {\r\n        functions.Add(name);\r\n        Console.WriteLine();\r\n        Console.WriteLine(<span style=\"color:#A31515\">&quot;-------{0}--------&quot;</span>, name);\r\n        System.Diagnostics.Stopwatch watch = <span style=\"color:Blue\">new</span> System.Diagnostics.Stopwatch();\r\n        <span style=\"color:Blue\">int</span> i;\r\n        watch.Start();\r\n        <span style=\"color:Blue\">for</span> (i = 0; i &lt;= 100; i++)\r\n        {\r\n            action.Invoke(str, badChars);\r\n        }\r\n        watch.Stop();\r\n        Console.WriteLine(<span style=\"color:#A31515\">&quot;Time Elapsed: {0}&quot;</span>, watch.Elapsed);\r\n\r\n\r\n        File.WriteAllText(benchTicks, File.ReadAllText(benchTicks) + <span style=\"color:#A31515\">&quot;;&quot;</span> + watch.ElapsedTicks.ToString());\r\n        File.WriteAllText(benchMsec, File.ReadAllText(benchMsec) + <span style=\"color:#A31515\">&quot;;&quot;</span> + watch.ElapsedMilliseconds.ToString());\r\n        File.WriteAllText(benchSec, File.ReadAllText(benchSec) + <span style=\"color:#A31515\">&quot;;&quot;</span> + watch.Elapsed.ToString().Replace(<span style=\"color:#A31515\">&quot;:&quot;</span>, <span style=\"color:Blue\">string</span>.Empty).Replace(<span style=\"color:#A31515\">&quot;.&quot;</span>, <span style=\"color:#A31515\">&quot;,&quot;</span>).Replace(<span style=\"color:#A31515\">&quot; &quot;</span>, <span style=\"color:Blue\">string</span>.Empty));\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> StringReplaceChars( <span style=\"color:Blue\">string</span> input, <span style=\"color:Blue\">params</span> <span style=\"color:Blue\">char</span>[] toRemove )\r\n    {\r\n        <span style=\"color:Blue\">if</span> (input == <span style=\"color:Blue\">null</span> || toRemove == <span style=\"color:Blue\">null</span>)\r\n        {\r\n            <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentNullException(input == <span style=\"color:Blue\">null</span> ? <span style=\"color:#A31515\">&quot;input&quot;</span> : <span style=\"color:#A31515\">&quot;toRemove&quot;</span>);\r\n        }\r\n\r\n        <span style=\"color:Blue\">if</span> (input.Length == 0 || toRemove.Length == 0)\r\n        {\r\n            <span style=\"color:Blue\">return</span> input;\r\n        }\r\n\r\n        StringBuilder bldr = <span style=\"color:Blue\">new</span> StringBuilder(input.Length);\r\n        <span style=\"color:Blue\">bool</span> skip = <span style=\"color:Blue\">false</span>;\r\n        <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; input.Length; i++)\r\n        {\r\n            skip = <span style=\"color:Blue\">false</span>;\r\n            <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> y = 0; y &lt; toRemove.Length; y++)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (input[i] == toRemove[y])\r\n                {\r\n                    skip = <span style=\"color:Blue\">true</span>;\r\n                    <span style=\"color:Blue\">break</span>;\r\n                }\r\n            }\r\n\r\n            <span style=\"color:Blue\">if</span> (!skip)\r\n            {\r\n                bldr.Append(input[i]);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">return</span> bldr.ToString();\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> ReplacePlain( <span style=\"color:Blue\">string</span> input, <span style=\"color:Blue\">params</span> <span style=\"color:Blue\">char</span>[] toRemove )\r\n    {\r\n        <span style=\"color:Blue\">return</span> input.Replace(toRemove[0], <span style=\"color:#A31515\">' '</span>).Replace(toRemove[1], <span style=\"color:#A31515\">' '</span>).Replace(toRemove[2], <span style=\"color:#A31515\">' '</span>);\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> ReplacePlainDynamic( <span style=\"color:Blue\">string</span> input, <span style=\"color:Blue\">params</span> <span style=\"color:Blue\">char</span>[] toRemove )\r\n    {\r\n        <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; toRemove.Length; i++)\r\n            input = input.Replace(toRemove[i], <span style=\"color:#A31515\">' '</span>);\r\n\r\n        <span style=\"color:Blue\">return</span> input;\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> ReplaceStringPlain( <span style=\"color:Blue\">string</span> input, <span style=\"color:Blue\">params</span> <span style=\"color:Blue\">char</span>[] toRemove )\r\n    {\r\n        <span style=\"color:Blue\">return</span> input.Replace(<span style=\"color:#A31515\">&quot;\\r&quot;</span>, <span style=\"color:Blue\">string</span>.Empty).Replace(<span style=\"color:#A31515\">&quot;\\n&quot;</span>, <span style=\"color:Blue\">string</span>.Empty).Replace(<span style=\"color:#A31515\">&quot;\\t&quot;</span>, <span style=\"color:Blue\">string</span>.Empty);\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> StringReplaceChars2( <span style=\"color:Blue\">string</span> input, <span style=\"color:Blue\">params</span> <span style=\"color:Blue\">char</span>[] toRemove )\r\n    {\r\n        <span style=\"color:Blue\">if</span> (input == <span style=\"color:Blue\">null</span> || toRemove == <span style=\"color:Blue\">null</span>)\r\n        {\r\n            <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentNullException(input == <span style=\"color:Blue\">null</span> ? <span style=\"color:#A31515\">&quot;input&quot;</span> : <span style=\"color:#A31515\">&quot;toRemove&quot;</span>);\r\n        }\r\n\r\n        <span style=\"color:Blue\">if</span> (input.Length == 0 || toRemove.Length == 0)\r\n        {\r\n            <span style=\"color:Blue\">return</span> input;\r\n        }\r\n\r\n        StringBuilder bldr = <span style=\"color:Blue\">new</span> StringBuilder(input.Length);\r\n\r\n        <span style=\"color:Blue\">bool</span> skip = <span style=\"color:Blue\">false</span>;\r\n        <span style=\"color:Blue\">int</span> start = 0, length = 0;\r\n        <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; input.Length; i++)\r\n        {\r\n            <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> y = 0; y &lt; toRemove.Length; y++)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (input[i] == toRemove[y])\r\n                {\r\n                    bldr.Append(input.Substring(start, length));\r\n                    skip = <span style=\"color:Blue\">true</span>;\r\n                    length = 0;\r\n                    <span style=\"color:Blue\">break</span>;\r\n                }\r\n            }\r\n\r\n            <span style=\"color:Blue\">if</span> (skip)\r\n            {\r\n                start = i;\r\n                skip = <span style=\"color:Blue\">false</span>;\r\n            }\r\n            length++;\r\n        }\r\n\r\n        <span style=\"color:Blue\">return</span> bldr.ToString();\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> StringReplaceChars3( <span style=\"color:Blue\">string</span> input, <span style=\"color:Blue\">params</span> <span style=\"color:Blue\">char</span>[] toRemove )\r\n    {\r\n        <span style=\"color:Blue\">if</span> (input == <span style=\"color:Blue\">null</span> || toRemove == <span style=\"color:Blue\">null</span>)\r\n        {\r\n            <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentNullException(input == <span style=\"color:Blue\">null</span> ? <span style=\"color:#A31515\">&quot;input&quot;</span> : <span style=\"color:#A31515\">&quot;toRemove&quot;</span>);\r\n        }\r\n\r\n        <span style=\"color:Blue\">if</span> (input.Length == 0 || toRemove.Length == 0)\r\n        {\r\n            <span style=\"color:Blue\">return</span> input;\r\n        }\r\n\r\n        StringBuilder bldr = <span style=\"color:Blue\">new</span> StringBuilder(input.Length);\r\n\r\n        <span style=\"color:Blue\">bool</span> skip = <span style=\"color:Blue\">false</span>;\r\n        <span style=\"color:Blue\">int</span> start = 0, length = 0;\r\n        <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; input.Length; i++)\r\n        {\r\n            <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> y = 0; y &lt; toRemove.Length; y++)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (input[i] == toRemove[y])\r\n                {\r\n                    <span style=\"color:Blue\">if</span> (length &gt; 0)\r\n                    {\r\n                        bldr.Append(input.Substring(start, length));\r\n                    }\r\n                    length = -1; \r\n                    start = i + 1;\r\n                    <span style=\"color:Blue\">break</span>; <span style=\"color:Green\">// Note: This just breaks out of the *inner* for-loop.</span>\r\n                }\r\n            }\r\n            length++;\r\n        }\r\n\r\n        <span style=\"color:Blue\">return</span> bldr.ToString();\r\n    }\r\n\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-02T09:51:23.683-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "218530",
    "ThreadId": "60980",
    "Html": "<p>Now this is getting interesting. Originally I thought String.Replace would be slow with larger text as well. It wasn't until you posted your code and I ran it against String.Replace that I delved into it further and found in reflector that it was doing an external assembly call. I was quite surprised at the performance difference. Even more curious I just ran your new code  and got rather different results than you did. I'm thinking it's computer differences.&nbsp; I'm running Windows 7 64-bit RC on a Pentium D 820 with 2GB of RAM.</p>\r\n<p>After some playing around with the configurations I think I found why I ended up getting such a difference. I ran my original tests in x64, seems like String.Replace gets quite a performance boost in 64-bit environments. Also running it in release mode vs debug mode makes quite a difference too. In Release x86(32bit) your functions beat it slightly, in Release x64 it String.Replace wins.</p>\r\n<p><a href=\"http://blog.j-maxx.net/pics/strreplace/resultsx64.png\"><img src=\"http://blog.j-maxx.net/pics/strreplace/resultsx64.png\" alt=\"\"></a></p>\r\n<p><a href=\"http://blog.j-maxx.net/pics/strreplace/resultsx86.png\"><img src=\"http://blog.j-maxx.net/pics/strreplace/resultsx86.png\" alt=\"\"></a></p>\r\n<p>I don't have Excel on this machine (not wasting my license on it, replacing it soon).</p>\r\n<p>I do like the approach you started to take in the last two functions, definitely tweaked quite a bit. But it always comes down to re-inventing the wheel and time vs cost benefits. I stopped trying to redo many of the built in functions of .NET years ago because the time it took to come up with something as close or better just wasn't worth it.</p>\r\n<p>I also noticed 1 difference between our code. I was always replacing with a space and you were completely stripping out the character. Having a space is probably needed otherwise you will end up with words running together. I added a line into your functions that added the space. Adding the space does add a bit more time.</p>\r\n<p><a href=\"http://blog.j-maxx.net/pics/strreplace/resultsWithSpacex86.PNG\"><img src=\"http://blog.j-maxx.net/pics/strreplace/resultsWithSpacex86.PNG\" alt=\"\"></a></p>\r\n<p>I've tweaked the code a bit to run multiple iterations of the tests per run and added a batch file to run all modes and bit types. I also updated so all the functions do produce the same results.</p>\r\n<p><a href=\"http://blog.j-maxx.net/code/strreplace/StringReplaceTest.zip\">http://blog.j-maxx.net/code/strreplace/StringReplaceTest.zip</a></p>\r\n<p>My link above does include all the results of the last tests I ran, 6 runs on each build/bit type.</p>\r\n<p>This has been interesting to delve into, can custom code beat out BCL code? I guess the answer is yes in certain situations and no in other situations. Another intriguing thing is the performance gains in 64 bit.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-02T14:17:25.037-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "218692",
    "ThreadId": "60980",
    "Html": "<p>Very interesting indeed.</p>\r\n<p>I first set out to beat my own code, and what I focused on was your comment about the StringBuilder having to keep track of it's own state, which it does every iteration in the first revision. I started to think how I could get out of the pattern of appending every iteration. And because HtmlAgilityPack uses substring to do it's work on the raw HTML in HtmlDocument._text field, I don't think I would have come up with this so fast.</p>\r\n<p>That the Debug builds are slower than the BCL doesn't surprise me, pretty much expected. The speed gains in x64 is interesting indeed, but I'm not going there, I think this should mark the end for this &quot;performance tour&quot;.</p>\r\n<p>I also ignored the fact that your methods replaces characters with a space, rather than removing them, but this is a descision to be left with the developer, sometimes you can have spaces and sometimes you can't.</p>\r\n<p>However, with small texts (less than 1MB) the .NET implementation is more than good enough. If you run the same tests, but only uses the result of Wget(&quot;http://www.example.com/&quot;) as data, you'll see that .NET beats me every time. But this is something the developer should test for.</p>\r\n<p>I should also note that in my FaxSetup.log, there were only \\n's. not \\r\\n combination, thats why I went with the WU.log, both \\t and \\r\\n.</p>\r\n<p>I'm just curious what the numbers would be if this exercise (?) were ported to C/C++.</p>\r\n<p>Your specs: Windows 7 64-bit RC on a Pentium D 820 with 2GB of RAM</p>\r\n<p>My specs...: Windows XP 32-bit Pro EN SP3 on a Athlon 64 3500+ (2.21GHz) with 1 GB of RAM.</p>\r\n<p>All tests run with Task Manager reporting 860-980 MB memory usage (don't ask how I survive this).</p>",
    "PostedDate": "2009-08-03T03:07:10.707-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "218709",
    "ThreadId": "60980",
    "Html": "<p>Pretty pictures, 32 vs 64 based on your attached results.</p>\r\n<p><a style=\"text-decoration:none\" href=\"http://bildr.no/view/460726\"><img src=\"http://bildr.no/thumb/460726.jpeg\" alt=460726></a></p>\r\n<p><em>Ninjaedit:</em>&nbsp;The numbers is in Seconds.</p>",
    "PostedDate": "2009-08-03T03:46:19.527-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]