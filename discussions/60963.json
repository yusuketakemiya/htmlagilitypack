[
  {
    "Id": "206639",
    "ThreadId": "60963",
    "Html": "<p>I have an application which I want to read a HTML page and store the third, fourth, and fifth occurrences of&nbsp; bolded text in a string. &nbsp; Does anyone have a good idea how to do this?</p>",
    "PostedDate": "2009-06-29T08:35:09.163-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206649",
    "ThreadId": "60963",
    "Html": "<p>build a normalized list of all the nodes (recursive foreach building a List&lt;HtmlNode&gt;)</p>\r\n<p>After that do a list.Where(x=&gt;x.Name.Equals(&quot;b&quot;)).Skip(2).Take(3); (note code may not be exact but damn close).</p>\r\n<p>Or if you're interested in performance over maintainability you can keep track of the bold tags as you find them while recursing over the nodes.</p>\r\n<p><br>If the text is bold via CSS then there isn't a way to do it without writing a CSS rendering engine. If strong and b are being used then you'll have to run a few queries.</p>\r\n<p>&nbsp;</p>\r\n<p>The normalizing of the list will be a bit difficult in the current version of Html Agility Pack. Here's the code I use after I converted the HtmlCollection to implement IList&lt;T&gt; . This is a method on the HtmlNode object</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>        <span style=\"color:Blue\">public</span> IEnumerable&lt;HtmlNode&gt; Descendants()\r\n        {\r\n            List&lt;HtmlNode&gt; list = <span style=\"color:Blue\">new</span> List&lt;HtmlNode&gt;();\r\n\r\n            <span style=\"color:Blue\">if</span> (HasChildNodes)\r\n                list.AddRange(ChildNodes);\r\n\r\n            <span style=\"color:Blue\">foreach</span> (HtmlNode node <span style=\"color:Blue\">in</span> ChildNodes)\r\n                <span style=\"color:Blue\">if</span> (node.HasChildNodes)\r\n                    list.AddRange(node.Descendants());\r\n\r\n            <span style=\"color:Blue\">return</span> list;\r\n        }\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-06-29T08:50:45.357-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206742",
    "ThreadId": "60963",
    "Html": "<p>I'm sorry to bother you Darth, but I'm a beginner at the whole HTML Agility Pack thing.&nbsp; I was wondering if you could be a little more specific on how to do the second step of your explanation.&nbsp;</p>\r\n<p>&quot;After that do a list.Where(x=&gt;x.Name.Equals(&quot;b&quot;)).Skip(2).Take(3); (note code may not be exact but damn close).&quot;</p>\r\n<p>Thanks</p>",
    "PostedDate": "2009-06-29T12:49:58.003-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206748",
    "ThreadId": "60963",
    "Html": "<p>list would be</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>IEnumerable&lt;HtmlNode&gt; list = document.DocumentNode.Descendants();\r\n</pre>\r\n</div>\r\n</p>\r\n<p>That is doing a LINQ statement to grab every node where tag name is b, skip the first 2 and then grab the next three. You'll need to be compiling in .NET 3.5 and have included System.Linq.</p>\r\n<p>Below is basically what that one line does</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">int</span> count = 0;\r\nList&lt;HtmlNode&gt; boldTags = <span style=\"color:Blue\">new</span> List&lt;HtmlNode&gt;\r\n<span style=\"color:Blue\">foreach</span>(HtmlNode node <span style=\"color:Blue\">in</span> list)\r\n{\r\n   <span style=\"color:Blue\">if</span>(node.Name.Equals(<span style=\"color:#A31515\">&quot;b&quot;</span>))\r\n   {\r\n      count++;\r\n      <span style=\"color:Blue\">if</span>(count&gt;6)\r\n        <span style=\"color:Blue\">break</span>;\r\n \r\n      <span style=\"color:Blue\">if</span>(count&gt;=3 &amp;&amp; count&lt;=6)\r\n        boldTags.Add(node);\r\n      \r\n   }\r\n}\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-06-29T13:00:19.107-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206755",
    "ThreadId": "60963",
    "Html": "<p>I'm getting errors on HasChildNodes, ChildNodes, and the call to the Descendant method.&nbsp; Any help on how to solve these errors would be greatly appreciated.<br>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>  <span style=\"color:Blue\">public</span> IEnumerable&lt;HtmlNode&gt; Descendants()\r\n        {\r\n            List&lt;HtmlNode&gt; list = <span style=\"color:Blue\">new</span> List&lt;HtmlNode&gt;();\r\n\r\n            <span style=\"color:Blue\">if</span> (HasChildNodes)\r\n                list.AddRange(ChildNodes);\r\n\r\n            <span style=\"color:Blue\">foreach</span> (HtmlNode node <span style=\"color:Blue\">in</span> ChildNodes)\r\n                <span style=\"color:Blue\">if</span> (node.HasChildNodes)\r\n                    list.AddRange(node.Descendants());\r\n\r\n            <span style=\"color:Blue\">return</span> list;\r\n        }\r\n\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-06-29T13:34:21.163-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206760",
    "ThreadId": "60963",
    "Html": "<p>The Descendants() method should be added to the HtmlNode.cs file.</p>\r\n<p>If you don't want to edit the html agility pack source code, you can add an extension method.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Linq;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n\r\n<span style=\"color:Blue\">namespace</span> HtmlAgilityPack\r\n{\r\n    <span style=\"color:Blue\">public static</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> Extensions\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> IEnumerable&lt;HtmlNode&gt; Descendants(<span style=\"color:Blue\">this</span> HtmlNode theNode)\r\n        {\r\n            List&lt;HtmlNode&gt; list = <span style=\"color:Blue\">new</span> List&lt;HtmlNode&gt;();\r\n\r\n            <span style=\"color:Blue\">if</span> (theNode.HasChildNodes)\r\n                list.AddRange(theNode.ChildNodes);\r\n\r\n            <span style=\"color:Blue\">foreach</span> (var node <span style=\"color:Blue\">in</span> theNode.ChildNodes)\r\n                <span style=\"color:Blue\">if</span> (node.HasChildNodes)\r\n                    list.AddRange(node.Descendants());\r\n\r\n            <span style=\"color:Blue\">return</span> list;\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Though all of this may need the HtmlCollection.cs to be modified. Here's my copy (I'm hoping to get these changes added to Html Agility Pack once I get get in touch with simonm)</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Linq;\r\n\r\n<span style=\"color:Blue\">namespace</span> HtmlAgilityPack\r\n{\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Represents a combined list and collection of HTML nodes.</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> HtmlNodeCollection : IList&lt;HtmlNode&gt;\r\n    </span>{\r\n        <span style=\"color:Blue\">private</span> List&lt;HtmlNode&gt; items = <span style=\"color:Blue\">new</span> List&lt;HtmlNode&gt;();\r\n        <span style=\"color:Blue\">private</span> HtmlNode _parentnode;\r\n\r\n        <span style=\"color:Blue\">public</span> HtmlNodeCollection(HtmlNode parentnode)\r\n        {\r\n            _parentnode = parentnode; <span style=\"color:Green\">// may be null</span>\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets the number of elements actually contained in the list.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> Count\r\n        {\r\n            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">return</span> items.Count;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> Clear()\r\n        {\r\n            <span style=\"color:Blue\">foreach</span> (HtmlNode node <span style=\"color:Blue\">in</span> items)\r\n            {\r\n                node._parentnode = <span style=\"color:Blue\">null</span>;\r\n                node._nextnode = <span style=\"color:Blue\">null</span>;\r\n                node._prevnode = <span style=\"color:Blue\">null</span>;\r\n            }\r\n            items.Clear();\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> RemoveAt(<span style=\"color:Blue\">int</span> index)\r\n        {\r\n            HtmlNode next = <span style=\"color:Blue\">null</span>;\r\n            HtmlNode prev = <span style=\"color:Blue\">null</span>;\r\n            HtmlNode oldnode = (HtmlNode)items[index];\r\n\r\n            <span style=\"color:Blue\">if</span> (index &gt; 0)\r\n            {\r\n                prev = (HtmlNode)items[index - 1];\r\n            }\r\n\r\n            <span style=\"color:Blue\">if</span> (index &lt; (items.Count - 1))\r\n            {\r\n                next = (HtmlNode)items[index + 1];\r\n            }\r\n\r\n            items.RemoveAt(index);\r\n\r\n            <span style=\"color:Blue\">if</span> (prev != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (next == prev)\r\n                {\r\n                    <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> InvalidProgramException(<span style=\"color:#A31515\">&quot;Unexpected error.&quot;</span>);\r\n                }\r\n                prev._nextnode = next;\r\n            }\r\n\r\n            <span style=\"color:Blue\">if</span> (next != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                next._prevnode = prev;\r\n            }\r\n\r\n            oldnode._prevnode = <span style=\"color:Blue\">null</span>;\r\n            oldnode._nextnode = <span style=\"color:Blue\">null</span>;\r\n            oldnode._parentnode = <span style=\"color:Blue\">null</span>;\r\n            \r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> Replace(<span style=\"color:Blue\">int</span> index, HtmlNode node)\r\n        {\r\n            HtmlNode next = <span style=\"color:Blue\">null</span>;\r\n            HtmlNode prev = <span style=\"color:Blue\">null</span>;\r\n            HtmlNode oldnode = (HtmlNode)items[index];\r\n\r\n            <span style=\"color:Blue\">if</span> (index &gt; 0)\r\n            {\r\n                prev = (HtmlNode)items[index - 1];\r\n            }\r\n\r\n            <span style=\"color:Blue\">if</span> (index &lt; (items.Count - 1))\r\n            {\r\n                next = (HtmlNode)items[index + 1];\r\n            }\r\n\r\n            items[index] = node;\r\n\r\n            <span style=\"color:Blue\">if</span> (prev != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (node == prev)\r\n                {\r\n                    <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> InvalidProgramException(<span style=\"color:#A31515\">&quot;Unexpected error.&quot;</span>);\r\n                }\r\n                prev._nextnode = node;\r\n            }\r\n\r\n            <span style=\"color:Blue\">if</span> (next != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                next._prevnode = node;\r\n            }\r\n\r\n            node._prevnode = prev;\r\n            <span style=\"color:Blue\">if</span> (next == node)\r\n            {\r\n                <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> InvalidProgramException(<span style=\"color:#A31515\">&quot;Unexpected error.&quot;</span>);\r\n            }\r\n            node._nextnode = next;\r\n            node._parentnode = _parentnode;\r\n\r\n            oldnode._prevnode = <span style=\"color:Blue\">null</span>;\r\n            oldnode._nextnode = <span style=\"color:Blue\">null</span>;\r\n            oldnode._parentnode = <span style=\"color:Blue\">null</span>;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> Insert(<span style=\"color:Blue\">int</span> index, HtmlNode node)\r\n        {\r\n            HtmlNode next = <span style=\"color:Blue\">null</span>;\r\n            HtmlNode prev = <span style=\"color:Blue\">null</span>;\r\n\r\n            <span style=\"color:Blue\">if</span> (index &gt; 0)\r\n            {\r\n                prev = (HtmlNode)items[index - 1];\r\n            }\r\n\r\n            <span style=\"color:Blue\">if</span> (index &lt; items.Count)\r\n            {\r\n                next = (HtmlNode)items[index];\r\n            }\r\n\r\n            items.Insert(index, node);\r\n\r\n            <span style=\"color:Blue\">if</span> (prev != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (node == prev)\r\n                {\r\n                    <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> InvalidProgramException(<span style=\"color:#A31515\">&quot;Unexpected error.&quot;</span>);\r\n                }\r\n                prev._nextnode = node;\r\n            }\r\n\r\n            <span style=\"color:Blue\">if</span> (next != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                next._prevnode = node;\r\n            }\r\n\r\n            node._prevnode = prev;\r\n\r\n            <span style=\"color:Blue\">if</span> (next == node)\r\n            {\r\n                <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> InvalidProgramException(<span style=\"color:#A31515\">&quot;Unexpected error.&quot;</span>);\r\n            }\r\n\r\n            node._nextnode = next;\r\n            node._parentnode = _parentnode;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> Append(HtmlNode node)\r\n        {\r\n            HtmlNode last = <span style=\"color:Blue\">null</span>;\r\n            <span style=\"color:Blue\">if</span> (items.Count &gt; 0)\r\n            {\r\n                last = (HtmlNode)items[items.Count - 1];\r\n            }\r\n\r\n            items.Add(node);\r\n            node._prevnode = last;\r\n            node._nextnode = <span style=\"color:Blue\">null</span>;\r\n            node._parentnode = _parentnode;\r\n            <span style=\"color:Blue\">if</span> (last != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (last == node)\r\n                {\r\n                    <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> InvalidProgramException(<span style=\"color:#A31515\">&quot;Unexpected error.&quot;</span>);\r\n                }\r\n                last._nextnode = node;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> Prepend(HtmlNode node)\r\n        {\r\n            HtmlNode first = <span style=\"color:Blue\">null</span>;\r\n            <span style=\"color:Blue\">if</span> (items.Count &gt; 0)\r\n            {\r\n                first = (HtmlNode)items[0];\r\n            }\r\n\r\n            items.Insert(0, node);\r\n\r\n            <span style=\"color:Blue\">if</span> (node == first)\r\n            {\r\n                <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> InvalidProgramException(<span style=\"color:#A31515\">&quot;Unexpected error.&quot;</span>);\r\n            }\r\n            node._nextnode = first;\r\n            node._prevnode = <span style=\"color:Blue\">null</span>;\r\n            node._parentnode = _parentnode;\r\n            <span style=\"color:Blue\">if</span> (first != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                first._prevnode = node;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> Add(HtmlNode node)\r\n        {\r\n            items.Add(node);\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets the node at the specified index.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">public</span> HtmlNode <span style=\"color:Blue\">this</span>[<span style=\"color:Blue\">int</span> index]\r\n        {\r\n            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">return</span> items[index] <span style=\"color:Blue\">as</span> HtmlNode;\r\n            }\r\n            <span style=\"color:Blue\">set</span>\r\n            {\r\n                items[index] = value;\r\n            }\r\n        }\r\n      \r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> GetNodeIndex(HtmlNode node)\r\n        {\r\n            <span style=\"color:Green\">// TODO: should we rewrite this? what would be the key of a node?</span>\r\n            <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; items.Count; i++)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (node == ((HtmlNode)items[i]))\r\n                {\r\n                    <span style=\"color:Blue\">return</span> i;\r\n                }\r\n            }\r\n            <span style=\"color:Blue\">return</span> -1;\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets a given node from the list.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> <span style=\"color:Blue\">this</span>[HtmlNode node]\r\n        {\r\n            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">int</span> index = GetNodeIndex(node);\r\n                <span style=\"color:Blue\">if</span> (index == -1)\r\n                {\r\n                    <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentOutOfRangeException(<span style=\"color:#A31515\">&quot;node&quot;</span>, <span style=\"color:#A31515\">&quot;Node \\&quot;</span><span style=\"color:#A31515\">&quot; + node.CloneNode(false).OuterHtml + &quot;</span>\\<span style=\"color:#A31515\">&quot; was not found in the collection&quot;</span>);\r\n                }\r\n                <span style=\"color:Blue\">return</span> index;\r\n            }\r\n           \r\n        }\r\n        <span style=\"color:Blue\">public</span> HtmlNode <span style=\"color:Blue\">this</span>[<span style=\"color:Blue\">string</span> name]\r\n        {\r\n            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">return</span> items.SingleOrDefault(x=&gt;x.Name.Equals(name.ToLower()));\r\n            }\r\n        }\r\n      \r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> IndexOf(HtmlNode item)\r\n        {\r\n            <span style=\"color:Blue\">return</span> items.IndexOf(item);\r\n        }\r\n\r\n \r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">bool</span> Contains(HtmlNode item)\r\n        {\r\n           <span style=\"color:Blue\">return</span> items.Contains(item);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> CopyTo(HtmlNode[] array, <span style=\"color:Blue\">int</span> arrayIndex)\r\n        {\r\n            items.CopyTo(array, arrayIndex);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">bool</span> IsReadOnly\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>; }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">bool</span> Remove(HtmlNode item)\r\n        {\r\n            <span style=\"color:Blue\">int</span> i = items.IndexOf(item);\r\n             RemoveAt(i);\r\n             <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>;\r\n        }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">bool</span> Remove(<span style=\"color:Blue\">int</span> i)\r\n        {\r\n            RemoveAt(i);\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>;\r\n        }\r\n        IEnumerator&lt;HtmlNode&gt; IEnumerable&lt;HtmlNode&gt;.GetEnumerator()\r\n        {\r\n            <span style=\"color:Blue\">return</span> items.GetEnumerator();\r\n        }\r\n\r\n\r\n        IEnumerator IEnumerable.GetEnumerator()\r\n        {\r\n            <span style=\"color:Blue\">return</span> items.GetEnumerator();\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> HtmlNode FindFirst(<span style=\"color:Blue\">string</span> name)\r\n        {\r\n            <span style=\"color:Blue\">return</span> FindFirst(<span style=\"color:Blue\">this</span>, name);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> HtmlNode FindFirst(HtmlNodeCollection items, <span style=\"color:Blue\">string</span> name)\r\n        {\r\n            <span style=\"color:Blue\">foreach</span> (var node <span style=\"color:Blue\">in</span> items)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (node.Name.ToLower().Contains(name))\r\n                    <span style=\"color:Blue\">return</span> node;\r\n                <span style=\"color:Blue\">if</span> (node.HasChildNodes)\r\n                {\r\n                    var returnNode = FindFirst(node.ChildNodes, name);\r\n                    <span style=\"color:Blue\">if</span> (returnNode != <span style=\"color:Blue\">null</span>)\r\n                        <span style=\"color:Blue\">return</span> returnNode;\r\n                }\r\n            }\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-29T13:42:45.653-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]