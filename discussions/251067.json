[
  {
    "Id": "585901",
    "ThreadId": "251067",
    "Html": "\r\n<p>Our web site emboldens certain words in the text of user generated content by using vb.net's Replace function. But this is breaking links and image tags if the word(s) we want to embolden also appear in the src attribute of an &lt;img&gt; tag or the href\r\n attribute of&nbsp;an &lt;a&gt; tag.</p>\r\n<p>Does anyone know how to use the Html Agility Pack to replace all ocurrences of a word except where this word in in an attribute of an HTML tag?</p>\r\n<p>For example, say a user has entered the following html:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Dogs are my favourite animals.\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">a</span> <span style=\"color:red\">href</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;http://www.dogs.com&quot;</span><span style=\"color:blue\">&gt;</span>Click here to see my dog<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">a</span><span style=\"color:blue\">&gt;</span>. \r\nHere is a photo of some dogs: <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">img</span> <span style=\"color:red\">src</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;/images/dogs.jpg&quot;</span> <span style=\"color:blue\">/&gt;</span>.\r\n</pre>\r\n</div>\r\n<p>If I use VB.Net's replace function... strHtml = Replace(strHtml, &quot;dogs&quot;, &quot;&lt;strong&gt;dogs&lt;/dogs&gt;&quot;) ... that works fine for the text outside the &lt;a&gt; and &lt;img&gt; tags but wrecks the href and src attributes, making them look like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>href=&quot;http://www.<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">strong</span><span style=\"color:blue\">&gt;</span>dogs<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">strong</span><span style=\"color:blue\">&gt;</span>.com&quot;\r\nsrc=&quot;/images/<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">strong</span><span style=\"color:blue\">&gt;</span>dogs<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">strong</span><span style=\"color:blue\">&gt;</span>.com&quot;\r\n</pre>\r\n<pre>Any help much appreciated.</pre>\r\n</div>\r\n",
    "PostedDate": "2011-03-24T11:14:57.217-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "678382",
    "ThreadId": "251067",
    "Html": "<p>Did you found solution for this, I am interested also ....</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks.</p>",
    "PostedDate": "2011-09-29T14:11:19.763-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "679388",
    "ThreadId": "251067",
    "Html": "<p>This is how I made it work for my project. Call the function EmphasiseKeywordsInHtml passing it the text as a string and an array of all the words you want emphasising as an array. For the emphasisTag parameter, this can be \"b\" or \"strong\" or \"i\" depending on which tag you want to wrap. Let me know if you find this useful.</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>        <span style=\"color: blue;\">Public</span> <span style=\"color: blue;\">Shared</span> <span style=\"color: blue;\">Function</span> EmphasiseKeywordsInHtml(<span style=\"color: blue;\">ByVal</span> text <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>, <span style=\"color: blue;\">ByVal</span> keywordsToEmphasise() <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>, <span style=\"color: blue;\">ByVal</span> emphasisTag <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>, <span style=\"color: blue;\">ByVal</span> outputAsXHtml <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Boolean</span>) <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>\r\n\r\n            <span style=\"color: blue;\">Dim</span> strReturn <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span> = <span style=\"color: #a31515;\">\"\"</span>\r\n\r\n            <span style=\"color: green;\">'Check for empty/zero length string.</span>\r\n            <span style=\"color: blue;\">If</span> text &lt;&gt; <span style=\"color: #a31515;\">\"\"</span> <span style=\"color: blue;\">Then</span>\r\n\r\n                <span style=\"color: green;\">'Load the content into an Html Agility Pack document.</span>\r\n                <span style=\"color: blue;\">Dim</span> document <span style=\"color: blue;\">As</span> HtmlDocument = <span style=\"color: blue;\">New</span> HtmlDocument\r\n                document.LoadHtml(text)\r\n\r\n\r\n                <span style=\"color: green;\">'Are we outputting as XHTML or HTML?</span>\r\n                <span style=\"color: blue;\">If</span> outputAsXHtml = <span style=\"color: blue;\">True</span> <span style=\"color: blue;\">Then</span>\r\n                    <span style=\"color: green;\">'Output as XTHML.</span>\r\n                    document.OptionWriteEmptyNodes = <span style=\"color: blue;\">True</span>\r\n                <span style=\"color: blue;\">Else</span>\r\n                    <span style=\"color: green;\">'Output as HTML.</span>\r\n                    document.OptionWriteEmptyNodes = <span style=\"color: blue;\">False</span>\r\n                <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n\r\n\r\n                <span style=\"color: green;\">'Recursively iterate through the nodes of the html emphasising keywords.</span>\r\n                _EmphasiseKeywordsInHtmlRecursive(document.DocumentNode, keywordsToEmphasise, emphasisTag)\r\n\r\n\r\n                <span style=\"color: green;\">'Output the Html document to a string.</span>\r\n                <span style=\"color: blue;\">Dim</span> sb <span style=\"color: blue;\">As</span> StringBuilder = <span style=\"color: blue;\">New</span> StringBuilder()\r\n                <span style=\"color: blue;\">Using</span> sw <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">New</span> StringWriter(sb)\r\n                    document.Save(sw)\r\n                    sw.Flush()\r\n                    strReturn = sw.ToString()\r\n                <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Using</span>\r\n                sb = <span style=\"color: blue;\">Nothing</span>\r\n\r\n\r\n                <span style=\"color: green;\">'Finished with the Html Agility Pack document.</span>\r\n                document = <span style=\"color: blue;\">Nothing</span>\r\n\r\n            <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n\r\n            <span style=\"color: green;\">'Return the cleaned text/html.</span>\r\n            <span style=\"color: blue;\">Return</span> strReturn\r\n\r\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Function</span>\r\n\r\n\r\n        <span style=\"color: blue;\">Private</span> <span style=\"color: blue;\">Shared</span> <span style=\"color: blue;\">Sub</span> _EmphasiseKeywordsInHtmlRecursive(<span style=\"color: blue;\">ByRef</span> node <span style=\"color: blue;\">As</span> HtmlNode, <span style=\"color: blue;\">ByVal</span> keywordsToEmphasise() <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>, <span style=\"color: blue;\">ByVal</span> emphasisTag <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>)\r\n\r\n            <span style=\"color: blue;\">Dim</span> intNodeIndex <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Integer</span> = -1\r\n            <span style=\"color: blue;\">Dim</span> blnNodeRemoved <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Boolean</span>\r\n            <span style=\"color: blue;\">Dim</span> strNodeText <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>\r\n            <span style=\"color: blue;\">Dim</span> objRegEx <span style=\"color: blue;\">As</span> Regex\r\n\r\n            <span style=\"color: blue;\">If</span> node.HasChildNodes = <span style=\"color: blue;\">True</span> <span style=\"color: blue;\">Then</span>\r\n\r\n                <span style=\"color: green;\">'Iterate through all child nodes in this node.</span>\r\n                <span style=\"color: blue;\">Do</span>\r\n                    <span style=\"color: green;\">'Increment child node index.</span>\r\n                    intNodeIndex += 1\r\n                    blnNodeRemoved = <span style=\"color: blue;\">False</span>\r\n\r\n\r\n                    <span style=\"color: green;\">'Is the node a text node?</span>\r\n                    <span style=\"color: blue;\">If</span> node.ChildNodes(intNodeIndex).Name = <span style=\"color: #a31515;\">\"#text\"</span> <span style=\"color: blue;\">Then</span>\r\n\r\n                        <span style=\"color: green;\">'Put the child node's InnerHtml into a string variable.</span>\r\n                        strNodeText = node.ChildNodes(intNodeIndex).InnerHtml\r\n\r\n\r\n                        <span style=\"color: green;\">'Iterate through array of keywords, wrapping the emphasis tag round each occurrence of the keywords.</span>\r\n                        <span style=\"color: blue;\">For</span> i <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Integer</span> = 0 <span style=\"color: blue;\">To</span> keywordsToEmphasise.<span style=\"color: blue;\">Count</span> - 1\r\n\r\n                            <span style=\"color: blue;\">Select</span> <span style=\"color: blue;\">Case</span> Trim(LCase(keywordsToEmphasise(i)))\r\n                                <span style=\"color: blue;\">Case</span> <span style=\"color: #a31515;\">\"\"</span>, emphasisTag, <span style=\"color: #a31515;\">\"&lt;\"</span>, <span style=\"color: #a31515;\">\"&gt;\"</span>, <span style=\"color: #a31515;\">\".\"</span>\r\n                                    <span style=\"color: green;\">'Don't emphasise these words.</span>\r\n\r\n                                <span style=\"color: blue;\">Case</span> <span style=\"color: blue;\">Else</span>\r\n                                    <span style=\"color: green;\">'Replace the keyword using a case-insensitive match with the same keyword wrapped in the emphasis tag and preserve the case of the original word.</span>\r\n                                    objRegEx = <span style=\"color: blue;\">New</span> Regex(<span style=\"color: #a31515;\">\"(\"</span> &amp; Regex.Escape(keywordsToEmphasise(i)) &amp; <span style=\"color: #a31515;\">\")\"</span>, RegexOptions.IgnoreCase)\r\n                                    strNodeText = objRegEx.Replace(strNodeText, <span style=\"color: #a31515;\">\"&lt;\"</span> &amp; emphasisTag &amp; <span style=\"color: #a31515;\">\"&gt;$1&lt;/\"</span> &amp; emphasisTag &amp; <span style=\"color: #a31515;\">\"&gt;\"</span>)\r\n\r\n                            <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Select</span>\r\n\r\n                        <span style=\"color: blue;\">Next</span>\r\n\r\n\r\n                        <span style=\"color: green;\">'Set the modified text as the InnerHtml of the child html node.</span>\r\n                        node.ChildNodes(intNodeIndex).InnerHtml = strNodeText\r\n\r\n                    <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n\r\n\r\n                    <span style=\"color: green;\">'Process this child node's children (only if this node has not been removed).</span>\r\n                    <span style=\"color: blue;\">If</span> blnNodeRemoved = <span style=\"color: blue;\">False</span> <span style=\"color: blue;\">Then</span>\r\n                        _EmphasiseKeywordsInHtmlRecursive(node.ChildNodes(intNodeIndex), keywordsToEmphasise, emphasisTag)\r\n\r\n                    <span style=\"color: blue;\">Else</span>\r\n                        <span style=\"color: green;\">'The node was removed, decrement the current node index.</span>\r\n                        intNodeIndex -= 1\r\n                    <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n\r\n\r\n                    <span style=\"color: green;\">'Have we just processed the last child node?</span>\r\n                    <span style=\"color: blue;\">If</span> intNodeIndex = node.ChildNodes.<span style=\"color: blue;\">Count</span> - 1 <span style=\"color: blue;\">Then</span>\r\n                        <span style=\"color: green;\">'We have finished processing all the child nodes.</span>\r\n                        <span style=\"color: blue;\">Exit</span> <span style=\"color: blue;\">Do</span>\r\n                    <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n\r\n                <span style=\"color: blue;\">Loop</span>\r\n\r\n            <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n\r\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Sub</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Public Shared Function EmphasiseKeywordsInHtml(ByVal text As String, ByVal keywordsToEmphasise() As String, ByVal emphasisTag As String, ByVal outputAsXHtml As Boolean) As String<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim strReturn As String = \"\"<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Check for empty/zero length string.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If text &lt;&gt; \"\" Then<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Load the content into an Html Agility Pack document.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim document As HtmlDocument = New HtmlDocument<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.LoadHtml(text)<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Are we outputting as XHTML or HTML?<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If outputAsXHtml = True Then<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Output as XTHML.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.OptionWriteEmptyNodes = True<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Output as HTML.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.OptionWriteEmptyNodes = False<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Recursively iterate through the nodes of the html emphasising keywords.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _EmphasiseKeywordsInHtmlRecursive(document.DocumentNode, keywordsToEmphasise, emphasisTag)<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Output the Html document to a string.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim sb As StringBuilder = New StringBuilder()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Using sw As New StringWriter(sb)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.Save(sw)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sw.Flush()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strReturn = sw.ToString()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Using<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sb = Nothing<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Finished with the Html Agility Pack document.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document = Nothing<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Return the cleaned text/html.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Return strReturn<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Function<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Private Shared Sub _EmphasiseKeywordsInHtmlRecursive(ByRef node As HtmlNode, ByVal keywordsToEmphasise() As String, ByVal emphasisTag As String)<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim intNodeIndex As Integer = -1<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim blnNodeRemoved As Boolean<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim strNodeText As String<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim objRegEx As Regex<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If node.HasChildNodes = True Then<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Iterate through all child nodes in this node.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Do<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Increment child node index.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intNodeIndex += 1<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; blnNodeRemoved = False<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Is the node a text node?<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If node.ChildNodes(intNodeIndex).Name = \"#text\" Then<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Put the child node's InnerHtml into a string variable.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strNodeText = node.ChildNodes(intNodeIndex).InnerHtml<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Iterate through array of keywords, wrapping the emphasis tag round each occurrence of the keywords.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For i As Integer = 0 To keywordsToEmphasise.Count - 1<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Select Case Trim(LCase(keywordsToEmphasise(i)))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case \"\", emphasisTag, \"&lt;\", \"&gt;\", \".\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Don't emphasise these words.<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case Else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Replace the keyword using a case-insensitive match with the same keyword wrapped in the emphasis tag and preserve the case of the original word.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; objRegEx = New Regex(\"(\" &amp; Regex.Escape(keywordsToEmphasise(i)) &amp; \")\", RegexOptions.IgnoreCase)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strNodeText = objRegEx.Replace(strNodeText, \"&lt;\" &amp; emphasisTag &amp; \"&gt;$1&lt;/\" &amp; emphasisTag &amp; \"&gt;\")<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Select<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Set the modified text as the InnerHtml of the child html node.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; node.ChildNodes(intNodeIndex).InnerHtml = strNodeText<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Process this child node's children (only if this node has not been removed).<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If blnNodeRemoved = False Then<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _EmphasiseKeywordsInHtmlRecursive(node.ChildNodes(intNodeIndex), keywordsToEmphasise, emphasisTag)<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'The node was removed, decrement the current node index.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intNodeIndex -= 1<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Have we just processed the last child node?<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If intNodeIndex = node.ChildNodes.Count - 1 Then<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'We have finished processing all the child nodes.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Do<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Loop<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Sub\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>        <span style=\"color: blue;\">Public</span> <span style=\"color: blue;\">Shared</span> <span style=\"color: blue;\">Function</span> EmphasiseKeywordsInHtml(<span style=\"color: blue;\">ByVal</span> text <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>, <span style=\"color: blue;\">ByVal</span> keywordsToEmphasise() <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>, <span style=\"color: blue;\">ByVal</span> emphasisTag <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>, <span style=\"color: blue;\">ByVal</span> outputAsXHtml <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Boolean</span>) <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>\r\n\r\n            <span style=\"color: blue;\">Dim</span> strReturn <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span> = <span style=\"color: #a31515;\">\"\"</span>\r\n\r\n            <span style=\"color: green;\">'Check for empty/zero length string.</span>\r\n            <span style=\"color: blue;\">If</span> text &lt;&gt; <span style=\"color: #a31515;\">\"\"</span> <span style=\"color: blue;\">Then</span>\r\n\r\n                <span style=\"color: green;\">'Load the content into an Html Agility Pack document.</span>\r\n                <span style=\"color: blue;\">Dim</span> document <span style=\"color: blue;\">As</span> HtmlDocument = <span style=\"color: blue;\">New</span> HtmlDocument\r\n                document.LoadHtml(text)\r\n\r\n\r\n                <span style=\"color: green;\">'Are we outputting as XHTML or HTML?</span>\r\n                <span style=\"color: blue;\">If</span> outputAsXHtml = <span style=\"color: blue;\">True</span> <span style=\"color: blue;\">Then</span>\r\n                    <span style=\"color: green;\">'Output as XTHML.</span>\r\n                    document.OptionWriteEmptyNodes = <span style=\"color: blue;\">True</span>\r\n                <span style=\"color: blue;\">Else</span>\r\n                    <span style=\"color: green;\">'Output as HTML.</span>\r\n                    document.OptionWriteEmptyNodes = <span style=\"color: blue;\">False</span>\r\n                <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n\r\n\r\n                <span style=\"color: green;\">'Recursively iterate through the nodes of the html emphasising keywords.</span>\r\n                _EmphasiseKeywordsInHtmlRecursive(document.DocumentNode, keywordsToEmphasise, emphasisTag)\r\n\r\n\r\n                <span style=\"color: green;\">'Output the Html document to a string.</span>\r\n                <span style=\"color: blue;\">Dim</span> sb <span style=\"color: blue;\">As</span> StringBuilder = <span style=\"color: blue;\">New</span> StringBuilder()\r\n                <span style=\"color: blue;\">Using</span> sw <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">New</span> StringWriter(sb)\r\n                    document.Save(sw)\r\n                    sw.Flush()\r\n                    strReturn = sw.ToString()\r\n                <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Using</span>\r\n                sb = <span style=\"color: blue;\">Nothing</span>\r\n\r\n\r\n                <span style=\"color: green;\">'Finished with the Html Agility Pack document.</span>\r\n                document = <span style=\"color: blue;\">Nothing</span>\r\n\r\n            <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n\r\n            <span style=\"color: green;\">'Return the cleaned text/html.</span>\r\n            <span style=\"color: blue;\">Return</span> strReturn\r\n\r\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Function</span>\r\n\r\n\r\n        <span style=\"color: blue;\">Private</span> <span style=\"color: blue;\">Shared</span> <span style=\"color: blue;\">Sub</span> _EmphasiseKeywordsInHtmlRecursive(<span style=\"color: blue;\">ByRef</span> node <span style=\"color: blue;\">As</span> HtmlNode, <span style=\"color: blue;\">ByVal</span> keywordsToEmphasise() <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>, <span style=\"color: blue;\">ByVal</span> emphasisTag <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>)\r\n\r\n            <span style=\"color: blue;\">Dim</span> intNodeIndex <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Integer</span> = -1\r\n            <span style=\"color: blue;\">Dim</span> blnNodeRemoved <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Boolean</span>\r\n            <span style=\"color: blue;\">Dim</span> strNodeText <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>\r\n            <span style=\"color: blue;\">Dim</span> objRegEx <span style=\"color: blue;\">As</span> Regex\r\n\r\n            <span style=\"color: blue;\">If</span> node.HasChildNodes = <span style=\"color: blue;\">True</span> <span style=\"color: blue;\">Then</span>\r\n\r\n                <span style=\"color: green;\">'Iterate through all child nodes in this node.</span>\r\n                <span style=\"color: blue;\">Do</span>\r\n                    <span style=\"color: green;\">'Increment child node index.</span>\r\n                    intNodeIndex += 1\r\n                    blnNodeRemoved = <span style=\"color: blue;\">False</span>\r\n\r\n\r\n                    <span style=\"color: green;\">'Is the node a text node?</span>\r\n                    <span style=\"color: blue;\">If</span> node.ChildNodes(intNodeIndex).Name = <span style=\"color: #a31515;\">\"#text\"</span> <span style=\"color: blue;\">Then</span>\r\n\r\n                        <span style=\"color: green;\">'Put the child node's InnerHtml into a string variable.</span>\r\n                        strNodeText = node.ChildNodes(intNodeIndex).InnerHtml\r\n\r\n\r\n                        <span style=\"color: green;\">'Iterate through array of keywords, wrapping the emphasis tag round each occurrence of the keywords.</span>\r\n                        <span style=\"color: blue;\">For</span> i <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Integer</span> = 0 <span style=\"color: blue;\">To</span> keywordsToEmphasise.<span style=\"color: blue;\">Count</span> - 1\r\n\r\n                            <span style=\"color: blue;\">Select</span> <span style=\"color: blue;\">Case</span> Trim(LCase(keywordsToEmphasise(i)))\r\n                                <span style=\"color: blue;\">Case</span> <span style=\"color: #a31515;\">\"\"</span>, emphasisTag, <span style=\"color: #a31515;\">\"&lt;\"</span>, <span style=\"color: #a31515;\">\"&gt;\"</span>, <span style=\"color: #a31515;\">\".\"</span>\r\n                                    <span style=\"color: green;\">'Don't emphasise these words.</span>\r\n\r\n                                <span style=\"color: blue;\">Case</span> <span style=\"color: blue;\">Else</span>\r\n                                    <span style=\"color: green;\">'Replace the keyword using a case-insensitive match with the same keyword wrapped in the emphasis tag and preserve the case of the original word.</span>\r\n                                    objRegEx = <span style=\"color: blue;\">New</span> Regex(<span style=\"color: #a31515;\">\"(\"</span> &amp; Regex.Escape(keywordsToEmphasise(i)) &amp; <span style=\"color: #a31515;\">\")\"</span>, RegexOptions.IgnoreCase)\r\n                                    strNodeText = objRegEx.Replace(strNodeText, <span style=\"color: #a31515;\">\"&lt;\"</span> &amp; emphasisTag &amp; <span style=\"color: #a31515;\">\"&gt;$1&lt;/\"</span> &amp; emphasisTag &amp; <span style=\"color: #a31515;\">\"&gt;\"</span>)\r\n\r\n                            <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Select</span>\r\n\r\n                        <span style=\"color: blue;\">Next</span>\r\n\r\n\r\n                        <span style=\"color: green;\">'Set the modified text as the InnerHtml of the child html node.</span>\r\n                        node.ChildNodes(intNodeIndex).InnerHtml = strNodeText\r\n\r\n                    <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n\r\n\r\n                    <span style=\"color: green;\">'Process this child node's children (only if this node has not been removed).</span>\r\n                    <span style=\"color: blue;\">If</span> blnNodeRemoved = <span style=\"color: blue;\">False</span> <span style=\"color: blue;\">Then</span>\r\n                        _EmphasiseKeywordsInHtmlRecursive(node.ChildNodes(intNodeIndex), keywordsToEmphasise, emphasisTag)\r\n\r\n                    <span style=\"color: blue;\">Else</span>\r\n                        <span style=\"color: green;\">'The node was removed, decrement the current node index.</span>\r\n                        intNodeIndex -= 1\r\n                    <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n\r\n\r\n                    <span style=\"color: green;\">'Have we just processed the last child node?</span>\r\n                    <span style=\"color: blue;\">If</span> intNodeIndex = node.ChildNodes.<span style=\"color: blue;\">Count</span> - 1 <span style=\"color: blue;\">Then</span>\r\n                        <span style=\"color: green;\">'We have finished processing all the child nodes.</span>\r\n                        <span style=\"color: blue;\">Exit</span> <span style=\"color: blue;\">Do</span>\r\n                    <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n\r\n                <span style=\"color: blue;\">Loop</span>\r\n\r\n            <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n\r\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Sub</span>\r\n</pre>\r\n</div>\r\n</div>",
    "PostedDate": "2011-10-03T08:58:48.027-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]