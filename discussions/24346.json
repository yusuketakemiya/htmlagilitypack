[
  {
    "Id": "81684",
    "ThreadId": "24346",
    "Html": "\r\nHas anyone used this tool for such a task?<br /><br />I'd like to allow users (on a comment form, for example) to put some HTML, like links, some formatting, or images. But I naturally don't want to allow anything else, and I want to make sure I don't open myself to XSS. Has anyone used this tool to pull off such a feat? <br /><br />Thanks in advance for any advice.<br />",
    "PostedDate": "2008-03-19T11:15:17.57-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "95507",
    "ThreadId": "24346",
    "Html": "I needed to do the same thing, but couldn't find any example code, so here's mine - it's not perfect, but it works well enough for my purposes...<br>\r\n<span style=\"font-family:courier new\"><br>\r\n<br>\r\n<hr>\r\n<br>\r\npublic string ScrubHTML(string html)<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp; HtmlDocument doc = new HtmlDocument();<br>\r\n&nbsp;&nbsp;&nbsp; doc.LoadHtml(html);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; //Remove potentially harmful elements<br>\r\n&nbsp;&nbsp;&nbsp; HtmlNodeCollection nc = doc.DocumentNode.SelectNodes(&quot;//script|//link|//iframe|//frameset|//frame|//applet|//object&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; if (nc != null)<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; foreach (HtmlNode node in nc)<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; node.ParentNode.RemoveChild(node, false);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; //remove hrefs to java/j/vbscript URLs<br>\r\n&nbsp;&nbsp;&nbsp; nc = doc.DocumentNode.SelectNodes(&quot;//a[starts-with(@href, 'javascript')]|//a[starts-with(@href, 'jscript')]|//a[starts-with(@href, 'vbscript')]&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; if (nc != null)<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; foreach (HtmlNode node in nc)<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; node.SetAttributeValue(&quot;href&quot;, &quot;protected&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; //remove img with refs to java/j/vbscript URLs<br>\r\n&nbsp;&nbsp;&nbsp; nc = doc.DocumentNode.SelectNodes(&quot;//img[starts-with(@src, 'javascript')]|//img[starts-with(@src, 'jscript')]|//img[starts-with(@src, 'vbscript')]&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; if (nc != null)<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; foreach (HtmlNode node in nc)<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; node.SetAttributeValue(&quot;src&quot;, &quot;protected&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; //remove on&lt;Event&gt; handlers from all tags<br>\r\n&nbsp;&nbsp;&nbsp; nc = doc.DocumentNode.SelectNodes(&quot;//*[@onclick or @onmouseover or @onfocus or @onblur or @onmouseout or @ondoubleclick or @onload or @onunload]&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; if (nc != null)<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; foreach (HtmlNode node in nc)<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; node.Attributes.Remove(&quot;onFocus&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; node.Attributes.Remove(&quot;onBlur&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; node.Attributes.Remove(&quot;onClick&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; node.Attributes.Remove(&quot;onMouseOver&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; node.Attributes.Remove(&quot;onMouseOut&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; node.Attributes.Remove(&quot;onDoubleClick&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; node.Attributes.Remove(&quot;onLoad&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; node.Attributes.Remove(&quot;onUnload&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n<br>\r\n&nbsp;&nbsp; return doc.DocumentNode.WriteTo();<br>\r\n} <br>\r\n<br>\r\n</span>\r\n",
    "PostedDate": "2008-05-29T08:42:23.107-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "95616",
    "ThreadId": "24346",
    "Html": "Cool - thanks for that.<br>\r\n",
    "PostedDate": "2008-05-29T13:55:39.3-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "101594",
    "ThreadId": "24346",
    "Html": "This&nbsp;piece of&nbsp;code works excellent.\r\n",
    "PostedDate": "2008-06-30T06:44:13.157-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "101622",
    "ThreadId": "24346",
    "Html": "Have a look into this thread... it might help you<br>\r\n<a href=\"http://www.codeplex.com/htmlagilitypack/Thread/View.aspx?ThreadId=16092\">http://www.codeplex.com/htmlagilitypack/Thread/View.aspx?ThreadId=16092</a>\r\n",
    "PostedDate": "2008-06-30T07:57:43.297-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "245370",
    "ThreadId": "24346",
    "Html": "<p>Great example (almost), Thanks! &nbsp;A few ways to make it stronger that I saw, though:</p>\r\n<p>1) Use case-insensitive search when looking for links with &quot;javascript:&quot;, &quot;vbscript:&quot;, &quot;jscript:&quot;. &nbsp;For example, the original example would not remove the HTML:</p>\r\n<p>&lt;a href=&quot;JAVAscRipt:alert('hi')&quot;&gt;click me&lt;/a&gt;</p>\r\n<p>2) Remove any style attributes that contain an expression rule. &nbsp;Internet Explorer evaluates the CSS rule express as script. &nbsp;For example, the following would product a message box:</p>\r\n<p>&lt;div style=&quot;width: expression(alert('hi'));&quot;&gt;bad code&lt;/div&gt;</p>\r\n<p>3) Also remove &lt;embed&gt; tags</p>\r\n<p>I honestly have no idea why &quot;expression&quot; has not been removed from IE - major flaw in my opinion. (Try the div example in internet explorer and you'll see why - even IE8.) &nbsp;I just wish there was an easier/standard way to clean-up html input from a user.</p>\r\n<p>&nbsp;</p>\r\n<p>Here's the code updated with these improvements. &nbsp;Let me know if you see anything wrong:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> ScrubHTML(<span style=\"color:Blue\">string</span> html)\r\n    {\r\n        HtmlDocument doc = <span style=\"color:Blue\">new</span> HtmlDocument();\r\n        doc.LoadHtml(html);\r\n\r\n        <span style=\"color:Green\">//Remove potentially harmful elements</span>\r\n        HtmlNodeCollection nc = doc.DocumentNode.SelectNodes(<span style=\"color:#A31515\">&quot;//script|//link|//iframe|//frameset|//frame|//applet|//object|//embed&quot;</span>);\r\n        <span style=\"color:Blue\">if</span> (nc != <span style=\"color:Blue\">null</span>)\r\n        {\r\n            <span style=\"color:Blue\">foreach</span> (HtmlNode node <span style=\"color:Blue\">in</span> nc)\r\n            {\r\n                node.ParentNode.RemoveChild(node, <span style=\"color:Blue\">false</span>);\r\n\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Green\">//remove hrefs to java/j/vbscript URLs</span>\r\n        nc = doc.DocumentNode.SelectNodes(<span style=\"color:#A31515\">&quot;//a[starts-with(translate(@href, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'javascript')]|//a[starts-with(translate(@href, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'jscript')]|//a[starts-with(translate(@href, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'vbscript')]&quot;</span>);\r\n        <span style=\"color:Blue\">if</span> (nc != <span style=\"color:Blue\">null</span>)\r\n        {\r\n\r\n            <span style=\"color:Blue\">foreach</span> (HtmlNode node <span style=\"color:Blue\">in</span> nc)\r\n            {\r\n                node.SetAttributeValue(<span style=\"color:#A31515\">&quot;href&quot;</span>, <span style=\"color:#A31515\">&quot;#&quot;</span>);\r\n            }\r\n        }\r\n\r\n\r\n        <span style=\"color:Green\">//remove img with refs to java/j/vbscript URLs</span>\r\n        nc = doc.DocumentNode.SelectNodes(<span style=\"color:#A31515\">&quot;//img[starts-with(translate(@src, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'javascript')]|//img[starts-with(translate(@src, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'jscript')]|//img[starts-with(translate(@src, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'vbscript')]&quot;</span>);\r\n        <span style=\"color:Blue\">if</span> (nc != <span style=\"color:Blue\">null</span>)\r\n        {\r\n            <span style=\"color:Blue\">foreach</span> (HtmlNode node <span style=\"color:Blue\">in</span> nc)\r\n            {\r\n                node.SetAttributeValue(<span style=\"color:#A31515\">&quot;src&quot;</span>, <span style=\"color:#A31515\">&quot;#&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Green\">//remove on&lt;Event&gt; handlers from all tags</span>\r\n        nc = doc.DocumentNode.SelectNodes(<span style=\"color:#A31515\">&quot;//*[@onclick or @onmouseover or @onfocus or @onblur or @onmouseout or @ondoubleclick or @onload or @onunload]&quot;</span>);\r\n        <span style=\"color:Blue\">if</span> (nc != <span style=\"color:Blue\">null</span>)\r\n        {\r\n            <span style=\"color:Blue\">foreach</span> (HtmlNode node <span style=\"color:Blue\">in</span> nc)\r\n            {\r\n                node.Attributes.Remove(<span style=\"color:#A31515\">&quot;onFocus&quot;</span>);\r\n                node.Attributes.Remove(<span style=\"color:#A31515\">&quot;onBlur&quot;</span>);\r\n                node.Attributes.Remove(<span style=\"color:#A31515\">&quot;onClick&quot;</span>);\r\n                node.Attributes.Remove(<span style=\"color:#A31515\">&quot;onMouseOver&quot;</span>);\r\n                node.Attributes.Remove(<span style=\"color:#A31515\">&quot;onMouseOut&quot;</span>);\r\n                node.Attributes.Remove(<span style=\"color:#A31515\">&quot;onDoubleClick&quot;</span>);\r\n                node.Attributes.Remove(<span style=\"color:#A31515\">&quot;onLoad&quot;</span>);\r\n                node.Attributes.Remove(<span style=\"color:#A31515\">&quot;onUnload&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Green\">// remove any style attributes that contain the word expression (IE evaluates this as script)</span>\r\n        nc = doc.DocumentNode.SelectNodes(<span style=\"color:#A31515\">&quot;//*[contains(translate(@style, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'expression')]&quot;</span>);\r\n        <span style=\"color:Blue\">if</span> (nc != <span style=\"color:Blue\">null</span>)\r\n        {\r\n            <span style=\"color:Blue\">foreach</span> (HtmlNode node <span style=\"color:Blue\">in</span> nc)\r\n            {\r\n                node.Attributes.Remove(<span style=\"color:#A31515\">&quot;stYle&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">return</span> doc.DocumentNode.WriteTo();\r\n    } \r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-13T20:43:04.077-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "461367",
    "ThreadId": "24346",
    "Html": "<p>Because this thread comes up first in the Google search results for HtmlAgilityPack sanitize html, I figured I would add another, more restrictive version. This version is based on a white list and only allows through the elements and attributes that you specifically allow.</p>\r\n<p>&nbsp;</p>\r\n<p>It also uses the new Linq syntax (to contrast with the above xPath methods).</p>\r\n<p>&nbsp;</p>\r\n<p>Any comment or suggestions for improvement are welcome:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">string</span> SanitizeHtml(<span style=\"color:blue\">string</span> html)\r\n        {\r\n            HtmlDocument doc = <span style=\"color:blue\">new</span> HtmlDocument();\r\n            doc.LoadHtml(html);\r\n\r\n\r\n            <span style=\"color:blue\">string</span>[] elementWhitelist = {\r\n                                            <span style=\"color:#a31515\">&quot;a&quot;</span>, <span style=\"color:#a31515\">&quot;u&quot;</span>, <span style=\"color:#a31515\">&quot;b&quot;</span>, <span style=\"color:#a31515\">&quot;i&quot;</span>, <span style=\"color:#a31515\">&quot;br&quot;</span>, <span style=\"color:#a31515\">&quot;br &quot;</span>, <span style=\"color:#a31515\">&quot;br&quot;</span>, <span style=\"color:#a31515\">&quot;h1&quot;</span>, <span style=\"color:#a31515\">&quot;h2&quot;</span>, <span style=\"color:#a31515\">&quot;h3&quot;</span>, <span style=\"color:#a31515\">&quot;h4&quot;</span>, <span style=\"color:#a31515\">&quot;h5&quot;</span>, <span style=\"color:#a31515\">&quot;h6&quot;</span>, <span style=\"color:#a31515\">&quot;span&quot;</span>,\r\n                                            <span style=\"color:#a31515\">&quot;div&quot;</span>, <span style=\"color:#a31515\">&quot;blockquote&quot;</span>, <span style=\"color:#a31515\">&quot;em&quot;</span>, <span style=\"color:#a31515\">&quot;sub&quot;</span>, <span style=\"color:#a31515\">&quot;sup&quot;</span>, <span style=\"color:#a31515\">&quot;s&quot;</span>, <span style=\"color:#a31515\">&quot;font&quot;</span>, <span style=\"color:#a31515\">&quot;ul&quot;</span>, <span style=\"color:#a31515\">&quot;li&quot;</span>, <span style=\"color:#a31515\">&quot;ol&quot;</span>, <span style=\"color:#a31515\">&quot;p&quot;</span>, <span style=\"color:#a31515\">&quot;#text&quot;</span>\r\n                                        };\r\n\r\n            <span style=\"color:blue\">string</span>[] attributeWhiteList = { <span style=\"color:#a31515\">&quot;class&quot;</span>, <span style=\"color:#a31515\">&quot;style&quot;</span>, <span style=\"color:#a31515\">&quot;src&quot;</span>, <span style=\"color:#a31515\">&quot;href&quot;</span>, <span style=\"color:#a31515\">&quot;color&quot;</span>, <span style=\"color:#a31515\">&quot;size&quot;</span> };\r\n\r\n            IList&lt;HtmlNode&gt; hnc = doc.DocumentNode.DescendantNodes().ToList();\r\n\r\n\r\n\r\n            <span style=\"color:green\">//remove non-white list nodes</span>\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = hnc.Count - 1; i &gt;= 0; i--)\r\n            {\r\n                HtmlNode htmlNode = hnc[i];\r\n                <span style=\"color:blue\">if</span> (!elementWhitelist.Contains(htmlNode.Name.ToLower()))\r\n                {\r\n                    htmlNode.Remove();\r\n                    <span style=\"color:blue\">continue</span>;\r\n                }\r\n\r\n                <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> att = htmlNode.Attributes.Count - 1; att &gt;= 0; att--)\r\n                {\r\n                    HtmlAttribute attribute = htmlNode.Attributes[att];\r\n                    <span style=\"color:green\">//remove any attribute that is not in the white list (such as event handlers)</span>\r\n                    <span style=\"color:blue\">if</span> (!attributeWhiteList.Contains(attribute.Name.ToLower()))\r\n                    {\r\n                        attribute.Remove();\r\n                    }\r\n\r\n                    <span style=\"color:green\">//strip any &quot;style&quot; attributes that contain the word &quot;expression&quot;</span>\r\n                    <span style=\"color:blue\">if</span> (attribute.Value.ToLower().Contains(<span style=\"color:#a31515\">&quot;expression&quot;</span>) &amp;&amp; attribute.Name.ToLower() == <span style=\"color:#a31515\">&quot;style&quot;</span>)\r\n                    {\r\n                        attribute.Value = <span style=\"color:blue\">string</span>.Empty;\r\n                    }\r\n\r\n\r\n                    <span style=\"color:blue\">if</span> (attribute.Name.ToLower() == <span style=\"color:#a31515\">&quot;src&quot;</span> || attribute.Name.ToLower() == <span style=\"color:#a31515\">&quot;href&quot;</span>)\r\n                    {\r\n                        <span style=\"color:green\">//strip if the link starts with anything other than http (such as jscript, javascript, vbscript, mailto, ftp, etc...)</span>\r\n                        <span style=\"color:blue\">if</span> (!attribute.Value.StartsWith(<span style=\"color:#a31515\">&quot;http&quot;</span>)) attribute.Value = <span style=\"color:#a31515\">&quot;#&quot;</span>;\r\n                    }\r\n                }\r\n            }\r\n            <span style=\"color:blue\">return</span> doc.DocumentNode.WriteTo();\r\n        }\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-06-29T14:44:01.603-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "522744",
    "ThreadId": "24346",
    "Html": "\r\n<p>Would anyone know how to modify the script above so it will work with .net 2.&nbsp; It doesn't have the ToList method :/</p>\r\n",
    "PostedDate": "2010-11-16T08:22:47.41-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "668307",
    "ThreadId": "24346",
    "Html": "<p>I have a problem where the input text contains email addresses in brackets:&nbsp; me&lt;me@aaa.com&gt;</p>\r\n<p>(Yahoo mail will put this in replies.)</p>\r\n<p>The browser treats &lt;me@aaa.com&gt; as an element and does not display it.&nbsp; I'm trying to figure out how to encode unknown HTML tags, such as this, so that they are displayed.</p>\r\n<p>For example, given this input string:</p>\r\n<p>&nbsp;@\"me&lt;me@aaa.com&gt;;&lt;br&gt;To: &lt;bbb@yahoo.com&gt;;&lt;br&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;a -&gt; b &lt;table style='font-family:times new roman;font-size:14pt;color:blue'&gt;&lt;tr&gt;&lt;td&gt;hello world&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;table style='font-family:times new roman'&gt;&lt;tr&gt;&lt;td&gt;hello world2&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;table &gt;&lt;tr&gt;&lt;td&gt;hello world3&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\"</p>\r\n<p>The PatrickBurrows solution doesn't work because it removes everything after the first aaa.com; apparently it thinks &lt; me@aaa.com &gt; is an opening tag.&nbsp; (And it&nbsp;also removes tables.)</p>\r\n<p>The joelthedrummer solution seems better in general (less risk of removing text that you'd want to see), but the &lt; me@aaa.com &gt; still does not display.&nbsp; (Unmatched tags, such as the -&gt;, display OK.)</p>\r\n<p>Does anyone know how I can detect non-html &lt; &gt; \"elements\" and encode them?</p>\r\n<p>Thanks!</p>",
    "PostedDate": "2011-09-06T15:08:55.617-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "668583",
    "ThreadId": "24346",
    "Html": "<p>I'd be curious to see how you tried to modify SanitizeHtml to meet your needs. For instance, did you add the table elements to the white list? Did you try to match an element that was really an email address?</p>\r\n<p>Here is a version of SanitizeHtml which meets your needs. I added the table tags to the white list and checked for an @ sign in the element name before stripping it. It would be even better to replace the @ sign check with your favorite email address matching RegEx (as the comment says):</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">string</span> SanitizeHtml(<span style=\"color: blue;\">string</span> html)\r\n        {\r\n            HtmlDocument doc = <span style=\"color: blue;\">new</span> HtmlDocument();\r\n            doc.LoadHtml(html);\r\n\r\n\r\n            <span style=\"color: blue;\">string</span>[] elementWhitelist = {\r\n                                            <span style=\"color: #a31515;\">\"a\"</span>, <span style=\"color: #a31515;\">\"u\"</span>, <span style=\"color: #a31515;\">\"b\"</span>, <span style=\"color: #a31515;\">\"i\"</span>, <span style=\"color: #a31515;\">\"br\"</span>, <span style=\"color: #a31515;\">\"br \"</span>, <span style=\"color: #a31515;\">\"br\"</span>, <span style=\"color: #a31515;\">\"h1\"</span>, <span style=\"color: #a31515;\">\"h2\"</span>, <span style=\"color: #a31515;\">\"h3\"</span>, <span style=\"color: #a31515;\">\"h4\"</span>, <span style=\"color: #a31515;\">\"h5\"</span>, <span style=\"color: #a31515;\">\"h6\"</span>, <span style=\"color: #a31515;\">\"span\"</span>,\r\n                                            <span style=\"color: #a31515;\">\"div\"</span>, <span style=\"color: #a31515;\">\"blockquote\"</span>, <span style=\"color: #a31515;\">\"em\"</span>, <span style=\"color: #a31515;\">\"sub\"</span>, <span style=\"color: #a31515;\">\"sup\"</span>, <span style=\"color: #a31515;\">\"s\"</span>, <span style=\"color: #a31515;\">\"font\"</span>, <span style=\"color: #a31515;\">\"ul\"</span>, <span style=\"color: #a31515;\">\"li\"</span>, <span style=\"color: #a31515;\">\"ol\"</span>, <span style=\"color: #a31515;\">\"p\"</span>, <span style=\"color: #a31515;\">\"#text\"</span>, \r\n                                            <span style=\"color: #a31515;\">\"table\"</span>, <span style=\"color: #a31515;\">\"tr\"</span>, <span style=\"color: #a31515;\">\"td\"</span>, <span style=\"color: #a31515;\">\"th\"</span>\r\n                                        };\r\n\r\n            <span style=\"color: blue;\">string</span>[] attributeWhiteList = { <span style=\"color: #a31515;\">\"class\"</span>, <span style=\"color: #a31515;\">\"style\"</span>, <span style=\"color: #a31515;\">\"src\"</span>, <span style=\"color: #a31515;\">\"href\"</span>, <span style=\"color: #a31515;\">\"color\"</span>, <span style=\"color: #a31515;\">\"size\"</span> };\r\n\r\n            IList&lt;HtmlNode&gt; hnc = doc.DocumentNode.DescendantNodes().ToList();\r\n\r\n\r\n\r\n            <span style=\"color: green;\">//remove non-white list nodes</span>\r\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> i = hnc.Count - 1; i &gt;= 0; i--)\r\n            {\r\n                HtmlNode htmlNode = hnc[i];\r\n                <span style=\"color: blue;\">if</span> (!elementWhitelist.Contains(htmlNode.Name.ToLower()))\r\n                {\r\n                    <span style=\"color: green;\">//note: replace this with your favorite email address matching regex</span>\r\n                    <span style=\"color: blue;\">if</span>(!htmlNode.Name.Contains(<span style=\"color: #a31515;\">\"@\"</span>)) htmlNode.Remove();\r\n                    <span style=\"color: blue;\">continue</span>;\r\n                }\r\n\r\n                <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> att = htmlNode.Attributes.Count - 1; att &gt;= 0; att--)\r\n                {\r\n                    HtmlAttribute attribute = htmlNode.Attributes[att];\r\n                    <span style=\"color: green;\">//remove any attribute that is not in the white list (such as event handlers)</span>\r\n                    <span style=\"color: blue;\">if</span> (!attributeWhiteList.Contains(attribute.Name.ToLower()))\r\n                    {\r\n                        attribute.Remove();\r\n                    }\r\n\r\n                    <span style=\"color: green;\">//strip any \"style\" attributes that contain the word \"expression\"</span>\r\n                    <span style=\"color: blue;\">if</span> (attribute.Value.ToLower().Contains(<span style=\"color: #a31515;\">\"expression\"</span>) &amp;&amp; attribute.Name.ToLower() == <span style=\"color: #a31515;\">\"style\"</span>)\r\n                    {\r\n                        attribute.Value = <span style=\"color: blue;\">string</span>.Empty;\r\n                    }\r\n\r\n\r\n                    <span style=\"color: blue;\">if</span> (attribute.Name.ToLower() == <span style=\"color: #a31515;\">\"src\"</span> || attribute.Name.ToLower() == <span style=\"color: #a31515;\">\"href\"</span>)\r\n                    {\r\n                        <span style=\"color: green;\">//strip if the link starts with anything other than http (such as jscript, javascript, vbscript, mailto, ftp, etc...)</span>\r\n                        <span style=\"color: blue;\">if</span> (!attribute.Value.StartsWith(<span style=\"color: #a31515;\">\"http\"</span>)) attribute.Value = <span style=\"color: #a31515;\">\"#\"</span>;\r\n                    }\r\n                }\r\n            }\r\n            <span style=\"color: blue;\">return</span> doc.DocumentNode.WriteTo();\r\n        }\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-09-07T06:10:40.327-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "668710",
    "ThreadId": "24346",
    "Html": "<p>Thanks PatrickBurrows!&nbsp; (I just mentioned the tables in case others wanted to add it - not that it was a reason to dismiss your solution at all.)&nbsp;&nbsp; This is a very good solution.&nbsp;&nbsp; <br />It just depends on the situation and whether a person wants to&nbsp;approach it&nbsp;from the blacklist or the whitelist angle.&nbsp; I agree that your solution&nbsp;is definitely the safest!&nbsp; <br />I'm parsing emails and just got worried that I might strip something unintentional if there's some bizarre tag.&nbsp; I should've clarified where my opinion was coming from. :)</p>\n<p>That looks like a good fix for the email address!&nbsp; However, the angle brackets would also need to be encoded for them to be visible in the browser.&nbsp; Is that possible?</p>\n<p>The other problem I came across&nbsp;with the agility pack&nbsp;is if the text had a legitimate &lt; in it; for example, inside a table cell.&nbsp; The agility pack seemed to get confused.&nbsp; <br />For example, a cell containing <strong>&lt; hello world </strong>appeared as <strong>&lt; hello=\"\"</strong></p>\n<p>I didn't have a lot of time to spend, but I got concerned about this and couldn't see how to fix it.&nbsp;&nbsp; Thanks again!</p>",
    "PostedDate": "2011-09-07T09:59:49.45-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "668731",
    "ThreadId": "24346",
    "Html": "<p>Yeah, the problem here is that the Email addresses aren't actually HTML. They just happen to also use angle brackets. HtmlAgilityPack is trying to parse it using the rules of Html (expecting closing nodes and the like.) It does a good job, but when it comes to replacing a malformed node like that, it just isn't going to work.</p>\r\n<p>Pre-parsing the Email Addresses using a RegEx (and changing the angle brackets to &amp;lt; and &amp;gt; respectively) and then parsing with HtmlAgilityPack would be safest.</p>",
    "PostedDate": "2011-09-07T11:10:06.677-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "674022",
    "ThreadId": "24346",
    "Html": "<p>The code is working absolutely fine. Thank you for posting!</p>\r\n<p>&nbsp;</p>\r\n<p><a href=\"http://ezeeprinting.com/page/raffle-tickets\">Raffle Tickets Printing</a> |<a href=\"http://www.ezeeprinting.com/page/ticket-book\">Ticket Book Printing Sheets</a> |<a href=\"http://www.ezeeprinting.com/page/ticket-sheets\">Ticket Sheets Printing</a> | <a href=\"http://www.ezeeprinting.com/page/event-ticket\">Event Tickets Printing</a></p>",
    "PostedDate": "2011-09-19T22:39:25.843-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1120373",
    "ThreadId": "24346",
    "Html": "Thanks PatrickBurrows, Your code are helpful and it's work, Again thanks.\r<br />\n<br />\n<br />\n<a href=\"http://www.liquidprinter.com/cardboard-boxes.html\" rel=\"nofollow\">Cardboard Boxes</a> | <a href=\"http://www.liquidprinter.com/retail-boxes.html\" rel=\"nofollow\">Retail Boxes</a> | <a href=\"http://www.liquidprinter.com/custom-boxes.html\" rel=\"nofollow\">Custom Boxes</a> | <a href=\"http://www.liquidprinter.com/software-boxes.html\" rel=\"nofollow\">Software Boxes</a><br />\n",
    "PostedDate": "2013-11-08T02:04:03.063-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]