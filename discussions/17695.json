[
  {
    "Id": "57765",
    "ThreadId": "17695",
    "Html": "\r\nFor an application I am working on, I had previously written a TON of manual redirect handling code (yes, I know the HttpWebRequest will handle redirects for you, but I needed to extract additional information from the redirections).<br /><br />I've been able to avoid that need by making an extremely simple modification to the FormProcessor addon which, while I know it hasn't been officially integrated into the HtmlAgilityPack core (and I think it should be!), it an absolutely indispensable addon that can be downloaded here:<br /><br /><a href=\"http://www.codeplex.com/htmlagilitypack/Wiki/View.aspx?title=http%3a%2f%2fdotnetjunkies.com%2fWebLog%2fjoshuagough%2farchive%2f2006%2f1%2f20.aspx\">http://dotnetjunkies.com/WebLog/joshuagough/archive/2006/1/20.aspx</a><br /><br />The modification I made is quite simple.  In the FormProcessor.GetForm(string,string,FormQueryModeEnum) method, change it to the following:<br /><br /><br /><br />        private string _GetFormUrl = \"\";<br />        public Form GetForm(string url, string xpath, FormQueryModeEnum queryMode)<br />        {<br />            _GetFormUrl = url;<br />            _web.PostResponse += new HtmlWeb.PostResponseHandler(postResponseHandler);<br />            HtmlDocument doc = _web.Load(url);<br />            _web.PostResponse -= new HtmlWeb.PostResponseHandler(postResponseHandler);<br />            return GetForm(doc, _GetFormUrl, xpath, queryMode);<br />        }<br /><br /><br /><br />And add the following method for the PostResponse handler:<br /><br /><br /><br />        private void postResponseHandler(HttpWebRequest req, HttpWebResponse resp)<br />        {<br />            if (_GetFormUrl != resp.ResponseUri.ToString()) // indicates a redirect<br />            {<br />                _GetFormUrl = resp.ResponseUri.ToString();<br />            }<br />        }<br /><br /><br /><br />This simple modification ensures that the final location of the redirects is the base url for the \"action\" attribute of the form, if that attribute is a relative URL instead of an absolute one.  The AttributeReferenceAbsolutizer checks if the action url is relative; if so, it creates an absolute URL using the original request URL, and the relative action URL.  If no redirect occurred, nothing needs to be done and the original code will operate as expected.<br /><br />That's why I was originally handling the redirects myself - I needed to know the final base URL that the form's action attribute pointed to.<br /><br />In the case of a redirect, that original request URL will be wrong.  This simple change \"fixes\" the issue.  It's arguable this is a design flaw; it's more like what I've done is added a feature.<br /><br />Hope this helps someone.<br />",
    "PostedDate": "2007-11-11T11:32:22.67-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]