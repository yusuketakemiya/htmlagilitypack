[
  {
    "Id": "454219",
    "ThreadId": "215674",
    "Html": "<p>Hi</p>\r\n<p>&nbsp;</p>\r\n<p>How would I make a whitelist and use html agility pack to remove all elements not in the whitelist?</p>\r\n<p>Thanks</p>",
    "PostedDate": "2010-06-10T16:24:44.177-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "455618",
    "ThreadId": "215674",
    "Html": "<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>\r\nSomething like this.<br><br><span style=\"color:blue\">void</span> Main()\r\n{\r\n   HtmlDocument doc = <span style=\"color:blue\">new</span> HtmlDocument();\r\n   doc.Load(<span style=\"color:#a31515\">&quot;someFile.html&quot;</span>);<span style=\"color:green\">//load html </span>\r\n<span style=\"color:blue\">   var</span> whiteList = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">string</span>&gt;{<span style=\"color:#a31515\">&quot;a&quot;</span>, <span style=\"color:#a31515\">&quot;b&quot;</span>, <span style=\"color:#a31515\">&quot;img&quot;</span>};<span style=\"color:green\">//fill whitelist tags</span>\r\n   RemoveNotInWhiteList(doc.DocumentNode, whiteList);\r\n}\r\n\r\n\r\n\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> RemoveNotInWhiteList(HtmlNode pNode, List&lt;<span style=\"color:blue\">string</span>&gt; pWhiteList)\r\n        {\r\n            <span style=\"color:blue\">if</span> (!pWhiteList.Contains(pNode.Name))\r\n            {\r\n                pNode.Remove();\r\n                <span style=\"color:blue\">return</span>;\r\n            }\r\n            <span style=\"color:blue\">if</span> (pNode.ChildNodes != <span style=\"color:blue\">null</span> &amp;&amp; pNode.ChildNodes.Count &gt; 0)\r\n            {\r\n                <span style=\"color:blue\">var</span> children = pNode.ChildNodes.ToList();\r\n                <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> child <span style=\"color:blue\">in</span> children)\r\n                {\r\n                    RemoveNotInWhiteList(child, pWhiteList);\r\n                }\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-06-15T06:05:08.73-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "455695",
    "ThreadId": "215674",
    "Html": "<p>How about attributes? Like &quot;herf&quot;. How would deal with those? Especially  for the fact that they can stick &lt;script&gt; tags in the link.</p>",
    "PostedDate": "2010-06-15T08:53:12.68-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "455966",
    "ThreadId": "215674",
    "Html": "<p>?</p>\r\n<p>Same. Attribute doesn't nest, so you don't need recurse.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">foreach</span> (HtmlAttribute att <span style=\"color:blue\">in</span> pNode.Attributes)\r\n{\r\n   <span style=\"color:blue\">if</span>(!pWhiteList.Contains(att.name))\r\n       att.Remove();\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-06-15T22:51:31.2-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "456317",
    "ThreadId": "215674",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>VikciaR wrote:</strong><br>\r\n<p>?</p>\r\n<p>Same. Attribute doesn't nest, so you don't need recurse.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">foreach</span> (HtmlAttribute att <span style=\"color:blue\">in</span> pNode.Attributes)\r\n{\r\n   <span style=\"color:blue\">if</span>(!pWhiteList.Contains(att.name))\r\n       att.Remove();\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</blockquote>\r\n<p>I am not following. Should I have 2 loops one for tags and one for their attributes?</p>",
    "PostedDate": "2010-06-16T11:48:11.67-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "457116",
    "ThreadId": "215674",
    "Html": "<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">void</span> Main()\r\n{\r\n   HtmlDocument doc = <span style=\"color:blue\">new</span> HtmlDocument();\r\n   doc.Load(<span style=\"color:#a31515\">&quot;someFile.html&quot;</span>);<span style=\"color:green\">//load html </span>\r\n   <span style=\"color:blue\">var</span> whiteList = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">string</span>&gt;{<span style=\"color:#a31515\">&quot;a&quot;</span>, <span style=\"color:#a31515\">&quot;b&quot;</span>, <span style=\"color:#a31515\">&quot;img&quot;</span>};<span style=\"color:green\">//fill whitelist tags</span>\r\n   RemoveNotInWhiteList(doc.DocumentNode, whiteList);\r\n}\r\n\r\n\r\n\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> RemoveNotInWhiteList(HtmlNode pNode, List&lt;<span style=\"color:blue\">string</span>&gt; pWhiteList)\r\n        {\r\n            <span style=\"color:blue\">if</span> (!pWhiteList.Contains(pNode.Name))\r\n            {\r\n                pNode.Remove();\r\n                <span style=\"color:blue\">return</span>;\r\n            }\r\n\r\n            <span style=\"color:blue\">if</span> (pNode.Attributes !=<span style=\"color:blue\">null</span> &amp;&amp; pNode.Attributes.Count&gt;0)\r\n            {\r\n\r\n               <span style=\"color:blue\">foreach</span> (HtmlAttribute att <span style=\"color:blue\">in</span> pNode.Attributes)\r\n               {\r\n                   <span style=\"color:blue\">if</span>(!pWhiteList.Contains(att.name))\r\n                   att.Remove();\r\n               }\r\n           }\r\n\r\n\r\n            <span style=\"color:blue\">if</span> (pNode.ChildNodes != <span style=\"color:blue\">null</span> &amp;&amp; pNode.ChildNodes.Count &gt; 0)\r\n            {\r\n                <span style=\"color:blue\">var</span> children = pNode.ChildNodes.ToList();\r\n                <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> child <span style=\"color:blue\">in</span> children)\r\n                {\r\n                    RemoveNotInWhiteList(child, pWhiteList);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-06-18T00:54:40.06-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "457223",
    "ThreadId": "215674",
    "Html": "<p>.NET 3.5 way with LINQ ;)</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> RemoveNotInWhiteList(HtmlNode pNode, IEnumerable&lt;<span style=\"color:blue\">string</span>&gt; pWhiteList)\r\n{\r\n    <span style=\"color:blue\">if</span> (!pWhiteList.Contains(pNode.Name))\r\n    {\r\n        pNode.Remove();\r\n        <span style=\"color:blue\">return</span>;\r\n    }\r\n\r\n    pNode.Attributes\r\n         .Where(att =&gt; !pWhiteList.Contains(att.Name))\r\n         .ToList()\r\n         .ForEach(att =&gt; att.Remove());            \r\n\r\n    pNode.ChildNodes\r\n         .ToList()\r\n         .ForEach(att =&gt; RemoveNotInWhiteList(att, pWhiteList));\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>In HAP both Attributes and Childnodes are never null so it is fine to do operations on them without checking.</p>",
    "PostedDate": "2010-06-18T05:18:29.46-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "457348",
    "ThreadId": "215674",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>DarthObiwan wrote:</strong><br>\r\n<p>.NET 3.5 way with LINQ ;)</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> RemoveNotInWhiteList(HtmlNode pNode, IEnumerable&lt;<span style=\"color:blue\">string</span>&gt; pWhiteList)\r\n{\r\n    <span style=\"color:blue\">if</span> (!pWhiteList.Contains(pNode.Name))\r\n    {\r\n        pNode.Remove();\r\n        <span style=\"color:blue\">return</span>;\r\n    }\r\n\r\n    pNode.Attributes\r\n         .Where(att =&gt; !pWhiteList.Contains(att.Name))\r\n         .ToList()\r\n         .ForEach(att =&gt; att.Remove());            \r\n\r\n    pNode.ChildNodes\r\n         .ToList()\r\n         .ForEach(att =&gt; RemoveNotInWhiteList(att, pWhiteList));\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>In HAP both Attributes and Childnodes are never null so it is fine to do operations on them without checking.</p>\r\n</blockquote>\r\n<p>Hi what is HAP?</p>\r\n<p>&nbsp;</p>\r\n<p>I like the linq way :)&nbsp;&nbsp; I don't get what is going on though. I am not sure what the if statement is actually doing. I am not sure what it is actually removing.&nbsp; It seems like this method is calling it self and it is doing for each node? is that correct?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-06-18T10:23:43.81-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "457350",
    "ThreadId": "215674",
    "Html": "HAP = Html Agility Pack\r\n\r\nYes, it is remove the node and the nodes descendants. Any nodes that pass muster then pass their child nodes through.",
    "PostedDate": "2010-06-18T10:30:42.937-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "457435",
    "ThreadId": "215674",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>chobo2 wrote:</strong><br>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>DarthObiwan wrote:</strong><br>\r\n<p>.NET 3.5 way with LINQ ;)</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> RemoveNotInWhiteList(HtmlNode pNode, IEnumerable&lt;<span style=\"color:blue\">string</span>&gt; pWhiteList)\r\n{\r\n    <span style=\"color:blue\">if</span> (!pWhiteList.Contains(pNode.Name))\r\n    {\r\n        pNode.Remove();\r\n        <span style=\"color:blue\">return</span>;\r\n    }\r\n\r\n    pNode.Attributes\r\n         .Where(att =&gt; !pWhiteList.Contains(att.Name))\r\n         .ToList()\r\n         .ForEach(att =&gt; att.Remove());            \r\n\r\n    pNode.ChildNodes\r\n         .ToList()\r\n         .ForEach(att =&gt; RemoveNotInWhiteList(att, pWhiteList));\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>In HAP both Attributes and Childnodes are never null so it is fine to do operations on them without checking.</p>\r\n</blockquote>\r\n<p>Hi what is HAP?</p>\r\n<p>&nbsp;</p>\r\n<p>I like the linq way :)&nbsp;&nbsp; I don't get what is going on though. I am not sure what the if statement is actually doing. I am not sure what it is actually removing.&nbsp; It seems like this method is calling it self and it is doing for each node? is that correct?</p>\r\n<p>&nbsp;</p>\r\n</blockquote>\r\n<p>I still don't get what the first if statement does.</p>\r\n<p>&nbsp;</p>\r\n<p>I have this html</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;!</span><span style=\"color:#a31515\">DOCTYPE</span> <span style=\"color:red\">HTML</span> <span style=\"color:red\">PUBLIC</span> <span style=\"color:blue\">&quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">html</span><span style=\"color:blue\">&gt;</span>\r\n\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">head</span><span style=\"color:blue\">&gt;</span>\r\n\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">title</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">title</span><span style=\"color:blue\">&gt;</span>\r\n\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">head</span><span style=\"color:blue\">&gt;</span>\r\n\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">body</span><span style=\"color:blue\">&gt;</span>\r\n\t <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">script</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;text/jscript&quot;</span><span style=\"color:blue\">&gt;</span>bad code here<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">script</span><span style=\"color:blue\">&gt;</span>\r\n     <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span>Hello I am not on white list yet<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span>\r\n\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">body</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">html</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>I have this code.</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> Main(<span style=\"color:blue\">string</span>[] args)\r\n        {\r\n\r\n            HtmlDocument doc = <span style=\"color:blue\">new</span> HtmlDocument();\r\n            <span style=\"color:blue\">string</span> dir = <span style=\"color:#a31515\">@&quot;c:\\ConsoleApplication1\\ConsoleApplication1\\HTMLPage1.htm&quot;</span>;\r\n            doc.Load(dir);<span style=\"color:green\">//load html </span>\r\n            <span style=\"color:blue\">var</span> whiteList = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">string</span>&gt; { <span style=\"color:#a31515\">&quot;a&quot;</span>, <span style=\"color:#a31515\">&quot;b&quot;</span>, <span style=\"color:#a31515\">&quot;img&quot;</span> };<span style=\"color:green\">//fill whitelist tags</span>\r\n            RemoveNotInWhiteList(doc.DocumentNode, whiteList);\r\n          \r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> RemoveNotInWhiteList(HtmlNode pNode, IEnumerable&lt;<span style=\"color:blue\">string</span>&gt; pWhiteList)\r\n        {\r\n            <span style=\"color:blue\">if</span> (!pWhiteList.Contains(pNode.Name))\r\n            {\r\n                pNode.Remove();\r\n                <span style=\"color:blue\">return</span>;\r\n            }\r\n\r\n            pNode.Attributes\r\n                 .Where(att =&gt; !pWhiteList.Contains(att.Name))\r\n                 .ToList()\r\n                 .ForEach(att =&gt; att.Remove());\r\n\r\n            pNode.ChildNodes\r\n                 .ToList()\r\n                 .ForEach(att =&gt; RemoveNotInWhiteList(att, pWhiteList));\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>So I try it and it just goes into RemoveNotInWhiteList once and that's it.</p>\r\n<p>pNode.Name = #doucment&nbsp; so it goes into that node and then I guess removes it and calls it a day.</p>",
    "PostedDate": "2010-06-18T15:04:14.443-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "457457",
    "ThreadId": "215674",
    "Html": "<p>Ok this is what I have so far.</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> Main(<span style=\"color:blue\">string</span>[] args)\r\n        {\r\n\r\n            HtmlDocument doc = <span style=\"color:blue\">new</span> HtmlDocument();\r\n            <span style=\"color:blue\">string</span> dir = <span style=\"color:#a31515\">@&quot;Path&quot;</span>;\r\n            doc.Load(dir);<span style=\"color:green\">//load html </span>\r\n            <span style=\"color:blue\">var</span> whiteList = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">string</span>&gt; { <span style=\"color:#a31515\">&quot;a&quot;</span>, <span style=\"color:#a31515\">&quot;img&quot;</span>, <span style=\"color:#a31515\">&quot;p&quot;</span>, <span style=\"color:#a31515\">&quot;#text&quot;</span> };<span style=\"color:green\">//fill whitelist tags</span>\r\n            <span style=\"color:blue\">var</span> attrWhiteList = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">string</span>&gt; { <span style=\"color:#a31515\">&quot;name&quot;</span> , <span style=\"color:#a31515\">&quot;herf&quot;</span>};\r\n            RemoveNotInWhiteList(doc.DocumentNode, whiteList, attrWhiteList);\r\n   \r\n      \r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> RemoveNotInWhiteList(HtmlNode pNode, List&lt;<span style=\"color:blue\">string</span>&gt; pWhiteList, List&lt;<span style=\"color:blue\">string</span>&gt; attrWhiteList)\r\n        {\r\n   \r\n            <span style=\"color:green\">// remove all attributes not on white list</span>\r\n            <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> item <span style=\"color:blue\">in</span> pNode.ChildNodes)\r\n            {\r\n                item.Attributes.Where(u =&gt; attrWhiteList.Contains(u.Name) == <span style=\"color:blue\">false</span>).ToList().ForEach(u =&gt; Test(u));\r\n\r\n            }\r\n\r\n            <span style=\"color:green\">// remove all html and their innerText and attributes if not on whitelist.</span>\r\n            pNode.ChildNodes.Where(u =&gt; pWhiteList.Contains(u.Name) == <span style=\"color:blue\">false</span>).ToList().ForEach(u =&gt; u.Remove());\r\n\r\n            Console.WriteLine(pNode.OuterHtml);\r\n        }\r\n\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> Test(HtmlAttribute u)\r\n        {\r\n            u.Value = u.Value.ToLower().Replace(<span style=\"color:#a31515\">&quot;javascript&quot;</span>, <span style=\"color:#a31515\">&quot;&quot;</span>);\r\n            u.Remove();\r\n            \r\n        }\r\n\r\n      }\r\n</pre>\r\n</div>\r\n<p>So a couple this. 1 I put #text as it seems to always be &quot;\\r\\n&quot; can it every be something different(ie can it be something bad?)</p>\r\n<p>&nbsp;</p>\r\n<p>Now the problems I am facing</p>\r\n<p>&nbsp;</p>\r\n<p>Also how would you stop this?</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>&lt;a href=&quot;javascript:(function(){<br>    alert('hello');<br>})()&quot;&gt;Hello<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">a</span><span style=\"color:blue\">&gt;</span><br><br><br>I want to allow hrefs but a person can do the above and it will work. How can you use html agility script to stop something like that?</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Say if I have a nested tags like this and bold is not on my whitelist</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span>hi <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">b</span><span style=\"color:blue\">&gt;</span>I am <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">b</span><span style=\"color:blue\">&gt;</span> bold<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span><br></pre>\r\n</div>\r\n<p>It will not remove &quot;b&quot; tag. So nested tags will get through. How can I stop this?</p>\r\n<p>Entire html with comments</p>\r\n<p>&nbsp;</p>\r\n<pre><code><span><div style=\"color:black;background-color:white\"><pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">script</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;text/jscript&quot;</span><span style=\"color:blue\">&gt;</span>bad code here<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">script</span><span style=\"color:blue\">&gt;</span>  // removes\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">p</span> <span style=\"color:red\">id</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;Hello&quot;</span><span style=\"color:blue\">&gt;</span>Hello I am not on white list yet<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span>  //allowed but id is removed\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">a</span> <span style=\"color:red\">href</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;javascript:alert('hi');&quot;</span><span style=\"color:blue\">&gt;</span>Bad<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">a</span><span style=\"color:blue\">&gt;</span>   //removes javascript rendering this useless\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span>Hi I am <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">b</span><span style=\"color:blue\">&gt;</span>Bold<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">b</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span>  // fails can't handle nested bold \r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span>Hi I am <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">b</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">big</span><span style=\"color:blue\">&gt;</span>Bold<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">big</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">b</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span> // fails can't handle nested bold nest with big\r\n</pre>\r\n</div>\r\n<br></span><span></span></code></pre>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-06-18T16:11:50.07-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "457467",
    "ThreadId": "215674",
    "Html": "<p>Ahh now I get why you guys where using recursion it all makes sense!</p>\r\n<p>So My only questions is what is #document (this confused me as was not in the whitelist so it never made it past the first if statement).</p>\r\n<p>Is it ok to put #document and #text in the whitelist? I am not sure what they are so it is hard to say.</p>\r\n<p>How would you stop the javascript part? You can see what I came up with. Finally would you just remove the whole node or try to take the inner text?</p>\r\n<p>so if you have &lt;b&gt; not on white list&lt;/b&gt; would you remove or just have &quot;not on white list&quot;?</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre> <span style=\"color:blue\">class</span> Program\r\n    {\r\n        <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> Main(<span style=\"color:blue\">string</span>[] args)\r\n        {\r\n\r\n            HtmlDocument doc = <span style=\"color:blue\">new</span> HtmlDocument();\r\n            <span style=\"color:blue\">string</span> dir = <span style=\"color:#a31515\">@&quot;Path&quot;</span>;\r\n            doc.Load(dir);<span style=\"color:green\">//load html</span>\r\n            <span style=\"color:blue\">var</span> whiteList = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">string</span>&gt; { <span style=\"color:#a31515\">&quot;a&quot;</span>, <span style=\"color:#a31515\">&quot;img&quot;</span>, <span style=\"color:#a31515\">&quot;p&quot;</span>, <span style=\"color:#a31515\">&quot;#text&quot;</span>, <span style=\"color:#a31515\">&quot;#document&quot;</span> };<span style=\"color:green\">//fill whitelist tags</span>\r\n            <span style=\"color:blue\">var</span> attrWhiteList = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">string</span>&gt; { <span style=\"color:#a31515\">&quot;name&quot;</span> , <span style=\"color:#a31515\">&quot;herf&quot;</span>};\r\n            RemoveNotInWhiteList(doc.DocumentNode, whiteList, attrWhiteList);\r\n\r\n            Console.WriteLine(doc.DocumentNode.OuterHtml);\r\n      \r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> RemoveNotInWhiteList(HtmlNode pNode, List&lt;<span style=\"color:blue\">string</span>&gt; pWhiteList, List&lt;<span style=\"color:blue\">string</span>&gt; attrWhiteList)\r\n        {\r\n\r\n            <span style=\"color:blue\">if</span> (pWhiteList.Contains(pNode.Name) == <span style=\"color:blue\">false</span>)\r\n            {\r\n                pNode.Remove();\r\n                <span style=\"color:blue\">return</span>;\r\n            }\r\n\r\n            pNode.ChildNodes.Where(u =&gt; pWhiteList.Contains(u.Name) == <span style=\"color:blue\">false</span>).ToList().ForEach(u =&gt; RemoveNotInWhiteList(u, pWhiteList, attrWhiteList));\r\n\r\n\r\n            <span style=\"color:green\">// remove all attributes not on white list</span>\r\n            <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> item <span style=\"color:blue\">in</span> pNode.ChildNodes)\r\n            {\r\n                item.Attributes.Where(u =&gt; attrWhiteList.Contains(u.Name) == <span style=\"color:blue\">false</span>).ToList().ForEach(u =&gt; Test(u));\r\n            }   \r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> Test(HtmlAttribute attr)\r\n        {\r\n            attr.Value = attr.Value.ToLower().Replace(<span style=\"color:#a31515\">&quot;javascript&quot;</span>, <span style=\"color:#a31515\">&quot;&quot;</span>);\r\n            attr.Remove();     \r\n        }\r\n\r\n</pre>\r\n</div>\r\n<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-06-18T18:34:36.397-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "457490",
    "ThreadId": "215674",
    "Html": "<p>I found one more hole.</p>\r\n<p>&nbsp;</p>\r\n<p>if &quot;p&quot;, &quot;a&quot; and href are on the whitelist</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">a</span> <span style=\"color:red\">href</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;javascript:alert('hi');&quot;</span><span style=\"color:blue\">&gt;</span>Bad<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">a</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">p</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\nthis will get through. However I want to go into all these valid attributes and check for bad things like &quot;javascript:alert('hi');</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-06-18T21:36:39.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "457513",
    "ThreadId": "215674",
    "Html": "<p>&nbsp;</p>\r\n<p>This hole is other question ;-) you want validate not only nodes (1st question), not only attributes (2nd question), but also attribute values (3rd question)</p>\r\n<p>&nbsp;</p>\r\n<p>If you need validate also attribute value, you need parse href value as string:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">if</span>(pNode.Attribute[<span style=\"color:#a31515\">&quot;href&quot;</span>].Value.StartsWith(<span style=\"color:#a31515\">&quot;javascript:&quot;</span>)\r\n{\r\n    <span style=\"color:green\">//then clean attribute</span>\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-06-19T00:55:54.853-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "457647",
    "ThreadId": "215674",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>VikciaR wrote:</strong><br>\r\n<p>&nbsp;</p>\r\n<p>This hole is other question ;-) you want validate not only nodes (1st question), not only attributes (2nd question), but also attribute values (3rd question)</p>\r\n<p>&nbsp;</p>\r\n<p>If you need validate also attribute value, you need parse href value as string:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">if</span>(pNode.Attribute[<span style=\"color:#a31515\">&quot;href&quot;</span>].Value.StartsWith(<span style=\"color:#a31515\">&quot;javascript:&quot;</span>)\r\n{\r\n    <span style=\"color:green\">//then clean attribute</span>\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</blockquote>\r\n<p>Ya alot of questions(but alot of ways for hackers to get through).&nbsp; That won't really work because you can write that javascript in hex as well or utf. I found that Microsoft has a great library to deal with that. The only thing that I am trying to figure out now is how to get all Urls as they can have also dangerous query strings in them.</p>\r\n<p>so I have to find</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">a</span> <span style=\"color:red\">href</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;http://somesite.com/view.aspx?q=&quot;badCode&quot;</span><span style=\"color:blue\">&gt;</span> hi <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">a</span><span style=\"color:blue\">&gt;</span>\r\n\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">a</span> <span style=\"color:red\">href</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;somesite.com/view.aspx?q=&quot;badCode&quot;</span><span style=\"color:blue\">&gt;</span> hi &lt;/a\r\n\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">img</span> <span style=\"color:red\">src</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;somesite.com/view.aspx?q=&quot;badCode&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">img</span> <span style=\"color:red\">src</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;http://somesite.com/view.aspx?q=&quot;badCode&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n\r\nhttp://somesite.com/view.aspx?q=&quot;badCode&quot;\r\n\r\nsomesite.com/view.aspx?q=&quot;badCode\r\n</pre>\r\n</div>\r\n</p>\r\n<p>So all these ways can have links in them some have new http in front of them and some are not even in html tags.</p>",
    "PostedDate": "2010-06-19T15:27:45.14-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "459830",
    "ThreadId": "215674",
    "Html": "<p>How would you make this remove the tags, but not the contents of the tags ?</p>\r\n<p>I pibked up this code from this blog: <a href=\"http://thomasjo.com/blog/archive/a-pessimistic-html-sanitizer/\">http://thomasjo.com/blog/archive/a-pessimistic-html-sanitizer/</a>&nbsp;, but I don't know how to make it remove just tags but not their inner content.</p>\r\n<p>Here is the class:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> HtmlAgilityPack;\r\n\r\n<span style=\"color:blue\">namespace</span> Wayloop.Blog.Core.Markup\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">class</span> HtmlSanitizer\r\n    {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> IDictionary&lt;<span style=\"color:blue\">string</span>, <span style=\"color:blue\">string</span>[]&gt; Whitelist;\r\n\r\n        <span style=\"color:blue\">static</span> HtmlSanitizer()\r\n        {\r\n            Whitelist = <span style=\"color:blue\">new</span> Dictionary&lt;<span style=\"color:blue\">string</span>, <span style=\"color:blue\">string</span>[]&gt; {\r\n                { <span style=\"color:#a31515\">&quot;a&quot;</span>, <span style=\"color:blue\">new</span>[] { <span style=\"color:#a31515\">&quot;href&quot;</span> } },\r\n                { <span style=\"color:#a31515\">&quot;strong&quot;</span>, <span style=\"color:blue\">null</span> },\r\n                { <span style=\"color:#a31515\">&quot;em&quot;</span>, <span style=\"color:blue\">null</span> },\r\n                { <span style=\"color:#a31515\">&quot;blockquote&quot;</span>, <span style=\"color:blue\">null</span> },\r\n                };\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">string</span> Sanitize(<span style=\"color:blue\">string</span> input)\r\n        {\r\n            <span style=\"color:blue\">var</span> htmlDocument = <span style=\"color:blue\">new</span> HtmlDocument();\r\n\r\n            htmlDocument.LoadHtml(input);\r\n            SanitizeNode(htmlDocument.DocumentNode);\r\n\r\n            <span style=\"color:blue\">return</span> htmlDocument.DocumentNode.WriteTo().Trim();\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> SanitizeChildren(HtmlNode parentNode)\r\n        {\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = parentNode.ChildNodes.Count - 1; i &gt;= 0; i--) {\r\n                SanitizeNode(parentNode.ChildNodes[i]);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> SanitizeNode(HtmlNode node)\r\n        {\r\n            <span style=\"color:blue\">if</span> (node.NodeType == HtmlNodeType.Element) {\r\n                <span style=\"color:blue\">if</span> (!Whitelist.ContainsKey(node.Name)) {\r\n                    node.ParentNode.RemoveChild(node);\r\n                    <span style=\"color:blue\">return</span>;\r\n                }\r\n\r\n                <span style=\"color:blue\">if</span> (node.HasAttributes) {\r\n                    <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = node.Attributes.Count - 1; i &gt;= 0; i--) {\r\n                        HtmlAttribute currentAttribute = node.Attributes[i];\r\n                        <span style=\"color:blue\">string</span>[] allowedAttributes = Whitelist[node.Name];\r\n                        <span style=\"color:blue\">if</span> (!allowedAttributes.Contains(currentAttribute.Name)) {\r\n                            node.Attributes.Remove(currentAttribute);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            <span style=\"color:blue\">if</span> (node.HasChildNodes) {\r\n                SanitizeChildren(node);\r\n            }\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>",
    "PostedDate": "2010-06-25T00:50:03.093-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "460616",
    "ThreadId": "215674",
    "Html": "<p>Here is the answer to my question. Not the fancyest code, but hey... it does it's job.</p>\r\n<p>The reason for redefining the node is because the &lt;?xml:namepace /&gt; tags give errors of xpath parsing.</p>\r\n<p>Here is the code.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">class</span> HtmlSanitizer\r\n    {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> IDictionary&lt;<span style=\"color:blue\">string</span>, <span style=\"color:blue\">string</span>[]&gt; Whitelist;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> List&lt;<span style=\"color:blue\">string</span>&gt; DeletableNodesXpath = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">string</span>&gt;();\r\n\r\n        <span style=\"color:blue\">static</span> HtmlSanitizer()\r\n        {\r\n            Whitelist = <span style=\"color:blue\">new</span> Dictionary&lt;<span style=\"color:blue\">string</span>, <span style=\"color:blue\">string</span>[]&gt; {\r\n                { <span style=\"color:#a31515\">&quot;a&quot;</span>, <span style=\"color:blue\">new</span>[] { <span style=\"color:#a31515\">&quot;href&quot;</span> } },\r\n                { <span style=\"color:#a31515\">&quot;strong&quot;</span>, <span style=\"color:blue\">null</span> },\r\n                { <span style=\"color:#a31515\">&quot;em&quot;</span>, <span style=\"color:blue\">null</span> },\r\n                { <span style=\"color:#a31515\">&quot;blockquote&quot;</span>, <span style=\"color:blue\">null</span> },\r\n                { <span style=\"color:#a31515\">&quot;b&quot;</span>, <span style=\"color:blue\">null</span>},\r\n                { <span style=\"color:#a31515\">&quot;p&quot;</span>, <span style=\"color:blue\">null</span>},\r\n                { <span style=\"color:#a31515\">&quot;ul&quot;</span>, <span style=\"color:blue\">null</span>},\r\n                { <span style=\"color:#a31515\">&quot;ol&quot;</span>, <span style=\"color:blue\">null</span>},\r\n                { <span style=\"color:#a31515\">&quot;li&quot;</span>, <span style=\"color:blue\">null</span>},\r\n                { <span style=\"color:#a31515\">&quot;div&quot;</span>, <span style=\"color:blue\">new</span>[] { <span style=\"color:#a31515\">&quot;align&quot;</span> } },\r\n                { <span style=\"color:#a31515\">&quot;strike&quot;</span>, <span style=\"color:blue\">null</span>},\r\n                { <span style=\"color:#a31515\">&quot;u&quot;</span>, <span style=\"color:blue\">null</span>},                \r\n                { <span style=\"color:#a31515\">&quot;sub&quot;</span>, <span style=\"color:blue\">null</span>},\r\n                { <span style=\"color:#a31515\">&quot;sup&quot;</span>, <span style=\"color:blue\">null</span>},\r\n                { <span style=\"color:#a31515\">&quot;table&quot;</span>, <span style=\"color:blue\">null</span> },\r\n                { <span style=\"color:#a31515\">&quot;tr&quot;</span>, <span style=\"color:blue\">null</span> },\r\n                { <span style=\"color:#a31515\">&quot;td&quot;</span>, <span style=\"color:blue\">null</span> },\r\n                { <span style=\"color:#a31515\">&quot;th&quot;</span>, <span style=\"color:blue\">null</span> }\r\n                };\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">string</span> Sanitize(<span style=\"color:blue\">string</span> input)\r\n        {\r\n            <span style=\"color:blue\">if</span> (input.Trim().Length &lt; 1)\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">string</span>.Empty;\r\n            <span style=\"color:blue\">var</span> htmlDocument = <span style=\"color:blue\">new</span> HtmlDocument();\r\n\r\n            htmlDocument.LoadHtml(input);            \r\n            SanitizeNode(htmlDocument.DocumentNode);\r\n            <span style=\"color:blue\">string</span> xPath = HtmlSanitizer.CreateXPath();\r\n\r\n            <span style=\"color:blue\">return</span> StripHtml(htmlDocument.DocumentNode.WriteTo().Trim(), xPath);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> SanitizeChildren(HtmlNode parentNode)\r\n        {\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = parentNode.ChildNodes.Count - 1; i &gt;= 0; i--)\r\n            {\r\n                SanitizeNode(parentNode.ChildNodes[i]);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> SanitizeNode(HtmlNode node)\r\n        {\r\n            <span style=\"color:blue\">if</span> (node.NodeType == HtmlNodeType.Element)\r\n            {\r\n                <span style=\"color:blue\">if</span> (!Whitelist.ContainsKey(node.Name))\r\n                {\r\n                    <span style=\"color:blue\">if</span> (!DeletableNodesXpath.Contains(node.Name))\r\n                    {                       \r\n                        <span style=\"color:green\">//DeletableNodesXpath.Add(node.Name.Replace(&quot;?&quot;,&quot;&quot;));</span>\r\n                        node.Name = <span style=\"color:#a31515\">&quot;removeableNode&quot;</span>;\r\n                        DeletableNodesXpath.Add(node.Name);\r\n                    }\r\n                    <span style=\"color:blue\">if</span> (node.HasChildNodes)\r\n                    {\r\n                        SanitizeChildren(node);\r\n                    }                  \r\n\r\n                    <span style=\"color:blue\">return</span>;\r\n                }\r\n\r\n                <span style=\"color:blue\">if</span> (node.HasAttributes)\r\n                {\r\n                    <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = node.Attributes.Count - 1; i &gt;= 0; i--)\r\n                    {\r\n                        HtmlAttribute currentAttribute = node.Attributes[i];\r\n                        <span style=\"color:blue\">string</span>[] allowedAttributes = Whitelist[node.Name];\r\n                        <span style=\"color:blue\">if</span> (allowedAttributes != <span style=\"color:blue\">null</span>)\r\n                        {\r\n                            <span style=\"color:blue\">if</span> (!allowedAttributes.Contains(currentAttribute.Name))\r\n                            {\r\n                                node.Attributes.Remove(currentAttribute);\r\n                            }\r\n                        }\r\n                        <span style=\"color:blue\">else</span>\r\n                        {\r\n                            node.Attributes.Remove(currentAttribute);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            <span style=\"color:blue\">if</span> (node.HasChildNodes)\r\n            {\r\n                SanitizeChildren(node);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">string</span> StripHtml(<span style=\"color:blue\">string</span> html, <span style=\"color:blue\">string</span> xPath)\r\n        {\r\n            HtmlDocument htmlDoc = <span style=\"color:blue\">new</span> HtmlDocument();\r\n            htmlDoc.LoadHtml(html);\r\n            <span style=\"color:blue\">if</span> (xPath.Length &gt; 0)\r\n            {\r\n                HtmlNodeCollection invalidNodes = htmlDoc.DocumentNode.SelectNodes(@xPath);\r\n                <span style=\"color:blue\">foreach</span> (HtmlNode node <span style=\"color:blue\">in</span> invalidNodes)\r\n                {\r\n                    node.ParentNode.RemoveChild(node, <span style=\"color:blue\">true</span>);\r\n                }\r\n            }\r\n            <span style=\"color:blue\">return</span> htmlDoc.DocumentNode.WriteContentTo(); ;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">string</span> CreateXPath()\r\n        {\r\n            <span style=\"color:blue\">string</span> _xPath = <span style=\"color:blue\">string</span>.Empty;\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; DeletableNodesXpath.Count; i++)\r\n            {\r\n                <span style=\"color:blue\">if</span> (i != DeletableNodesXpath.Count - 1)\r\n                {\r\n                    _xPath += <span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">&quot;//{0}|&quot;</span>, DeletableNodesXpath[i].ToString());\r\n                }\r\n                <span style=\"color:blue\">else</span> _xPath += <span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">&quot;//{0}&quot;</span>, DeletableNodesXpath[i].ToString());\r\n            }\r\n            <span style=\"color:blue\">return</span> _xPath;\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>It does it's job so far. Anyone up for code refactoring ?</p>",
    "PostedDate": "2010-06-28T05:19:04.78-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]