[
  {
    "Id": "218651",
    "ThreadId": "64268",
    "Html": "<p>Hi. I am a student and i have a project about getting some required information from an unsteady html source.</p>\r\n<p><a href=\"http://www.lyngsat.com/astra19.html\">Source</a></p>\r\n<p>Firstly, in order to get texts which are bold, i tried to make many regular expression.But, i couldn't make a useful expression.Also, source of html is so long. Later, I thought to take only tables out from the source. &quot;&lt;table&gt;(.*?)&lt;/table&gt;&quot; However, there were many tables and only 3 of these were required. Then, i noticed a comment line in the source. Required tables are between these comment lines.</p>\r\n<p>&quot;&lt;!-- big table start --&gt;&quot; &quot;&lt;!-- big table end --&gt;&quot; After that, i decided to take lines between these comments out.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">try</span>\r\n            {\r\n                \r\n                WebClient wClient = <span style=\"color:Blue\">new</span> WebClient();\r\n                <span style=\"color:Blue\">string</span> source = wClient.DownloadString(<span style=\"color:#A31515\">&quot;link&quot;</span>);\r\n                wClient.Dispose();\r\n\r\n                RegexOptions options = RegexOptions.IgnoreCase | RegexOptions.Singleline;\r\n                Regex regX = <span style=\"color:Blue\">new</span> Regex(<span style=\"color:#A31515\">&quot;&lt;!-- big table start --&gt;(?&lt;theBody&gt;.*)&lt;!-- big table end --&gt;&quot;</span>, options);\r\n\r\n                Match match = regX.Match(source);\r\n                <span style=\"color:Blue\">string</span> theBody = <span style=\"color:#A31515\">&quot;&quot;</span>;\r\n                <span style=\"color:Blue\">if</span> (match.Success)\r\n                {\r\n                    theBody = match.Value;\r\n                    <span style=\"color:Blue\">if</span> (theBody != <span style=\"color:Blue\">null</span> &amp;&amp; theBody != <span style=\"color:#A31515\">&quot;&quot;</span>)\r\n                    {\r\n                        textBox1.Text = theBody;\r\n                    }\r\n                }\r\n\r\n                StreamWriter sw = <span style=\"color:Blue\">new</span> StreamWriter(<span style=\"color:#A31515\">&quot;source.html&quot;</span>);\r\n                <span style=\"color:Blue\">foreach</span> (<span style=\"color:Blue\">char</span> line <span style=\"color:Blue\">in</span> theBody)\r\n                {\r\n                    sw.Write(line);\r\n                }\r\n            }\r\n            <span style=\"color:Blue\">catch</span> (Exception ex)\r\n            {\r\n                MessageBox.Show(ex.ToString());\r\n                <span style=\"color:Blue\">throw</span>;\r\n            }\r\n</pre>\r\n</div>\r\n<p>After that, i needed to extract first and third cells of tables. While i was seeking how i was going to solve this on the internet, i found html agility pack. Immediately, i began to try somethings using html agility pack. This is easier than all&nbsp;what i tried for days. Html agility pack can easily extract tables selecting nodes.&nbsp;While i surfing on your forums, i saw that code below. I performed this code into my project. Though, program was crashing in loops&nbsp;cause of long source. At the moment, i dont know&nbsp;what i should do. As well, i tried to take required tables from source and i saved them as text and html, but i couldnt convert them into HtmlDocument.&nbsp;Do you have any idea or&nbsp;suggestion for me?&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">string</span> result = <span style=\"color:#A31515\">&quot;&quot;</span>;\r\n\r\n                HtmlWeb web = <span style=\"color:Blue\">new</span> HtmlWeb();\r\n                HtmlAgilityPack.HtmlDocument doc = web.Load(<span style=\"color:#A31515\">&quot;link&quot;</span>);\r\n                HtmlNodeCollection tables = doc.DocumentNode.SelectNodes(<span style=\"color:#A31515\">&quot;//table&quot;</span>);\r\n                HtmlNodeCollection rows = tables[0].SelectNodes(<span style=\"color:#A31515\">&quot;//tr&quot;</span>);\r\n\r\n                StringCollection strCll = <span style=\"color:Blue\">new</span> StringCollection();    \r\n\r\n                <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; rows.Count; i++)\r\n                {\r\n                    HtmlNodeCollection cols = rows[i].SelectNodes(<span style=\"color:#A31515\">&quot;//td&quot;</span>);\r\n\r\n                    <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> j = 0; j &lt; cols.Count; j++)\r\n                    {\r\n                        result = cols[j].InnerText;\r\n                        strCll.Add(result);\r\n                    }\r\n                }\r\n\r\n                <span style=\"color:Blue\">string</span> str = <span style=\"color:#A31515\">&quot;&quot;</span>;\r\n                <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; strCll.Count; i++)\r\n                {\r\n                    str += strCll[i].ToString();\r\n                }\r\n\r\n                textBox1.Clear();\r\n                textBox1.Text = str;\r\n</pre>\r\n</div>\r\n<p>&nbsp;Kind regards,</p>",
    "PostedDate": "2009-08-03T00:38:08.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "218718",
    "ThreadId": "64268",
    "Html": "<p>Hi and welcome to the club!</p>\r\n<p>First I must advice you to always check for null when calling .SelectNodes or SelectSingleNode. If the XPath fails/doesn't find a match, these methods will return null!</p>\r\n<p>Secondly, if you need to find the XPath to any given element, you can use one or both FireFox addons: &quot;XPath checker&quot; and &quot;XPather&quot;. Note that Firefox for some reason always adds tbody after table, so you have to check manually in the source if there actually is a tbody. Otherwise you must remove it. For simple XPath these addons works well.</p>\r\n<p><strong><span style=\"color:#ff0000\">If my understanding of XPath is correct</span></strong>, in your loop, your code rows[i].SelectNodes(&quot;//td&quot;), you are actually asking for *every* TD-element in the document, and not all TD-elements that are child of row[i]. If you want children only, your XPath should look like &quot;.//td&quot;, note the punctuation before //.&nbsp;</p>\r\n<p><span style=\"text-decoration:underline\">Assuming</span> that SelectNodes and SelectSingleNode will return the expected node, has always been what makes trouble for me before.</p>\r\n<p>What exceptions do you get? Also the stack trace is key here.</p>",
    "PostedDate": "2009-08-03T04:08:51.787-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]