[
  {
    "Id": "218593",
    "ThreadId": "64256",
    "Html": "<p>Hi everyone,yesterday when i fix these two bug met few problems.Now i fixed two by different way.I hope this helps.</p>\r\n<p>UNIT TEST(If any failure please try DNS:218.85.152.99)</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>  [TestMethod()]\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> EncodingTest()\r\n        {\r\n            HtmlWeb target = <span style=\"color:Blue\">new</span> HtmlWeb();\r\n            target.AutoDetectEncoding = <span style=\"color:Blue\">true</span>;\r\n            Encoding expected, actual;\r\n            <span style=\"color:Blue\">string</span> url;\r\n            HtmlDocument doc;\r\n            <span style=\"color:Green\">//target page encoding by header</span>\r\n            url = <span style=\"color:#A31515\">&quot;http://www.google.cn&quot;</span>;\r\n            expected = Encoding.GetEncoding(<span style=\"color:#A31515\">&quot;gb2312&quot;</span>);\r\n            doc = target.Load(url);\r\n            actual = doc.Encoding;\r\n            Assert.AreEqual(expected, actual);\r\n            <span style=\"color:Green\">//target page encoding by content</span>\r\n            url = <span style=\"color:#A31515\">&quot;http://bt.popgo.net/&quot;</span>;\r\n            expected = Encoding.GetEncoding(<span style=\"color:#A31515\">&quot;gb2312&quot;</span>);\r\n            doc = target.Load(url);\r\n            actual =doc.Encoding;\r\n            Assert.AreEqual(expected, actual);\r\n            <span style=\"color:Green\">//target page encoding by default encoding</span>\r\n            url = <span style=\"color:#A31515\">&quot;http://homepage.mac.com/joeobrin/classic/fat.html&quot;</span>;\r\n            expected = Encoding.Default;\r\n            doc = target.Load(url);\r\n            actual = doc.Encoding;\r\n            Assert.AreEqual(expected, actual);\r\n        }\r\n        [TestMethod()]\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> HtmlNamedEntitiesTest()\r\n        {\r\n            HtmlWeb target = <span style=\"color:Blue\">new</span> HtmlWeb();\r\n            HtmlDocument.OptionEncedeHtmlEntities = <span style=\"color:Blue\">true</span>;//replace named entities like &quot;&amp;nbsp;&quot; to &quot; &quot; \r\n            <span style=\"color:Blue\">string</span>[] lines=File.ReadAllLines(<span style=\"color:#A31515\">@&quot;D:\\dic.txt&quot;</span>);//line example:&iexcl;,&amp;iexcl;(each line left is real item,right is named entities except 5 xml named entities,splited by ,)\r\n            IDictionary&lt;<span style=\"color:Blue\">string</span>, <span style=\"color:Blue\">string</span>&gt; htmlNamedEntities = <span style=\"color:Blue\">new</span> Dictionary&lt;<span style=\"color:Blue\">string</span>, <span style=\"color:Blue\">string</span>&gt;();\r\n            <span style=\"color:Blue\">foreach</span>(<span style=\"color:Blue\">string</span> line <span style=\"color:Blue\">in</span> lines)\r\n            {\r\n                <span style=\"color:Blue\">string</span> key=line.Substring(line.IndexOf(<span style=\"color:#A31515\">&quot;,&quot;</span>) + 1);\r\n                <span style=\"color:Blue\">string</span> value= line.Substring(0, line.IndexOf(<span style=\"color:#A31515\">&quot;,&quot;</span>));\r\n                <span style=\"color:Blue\">if</span> (!htmlNamedEntities.ContainsKey(key))\r\n                    htmlNamedEntities.Add(key,value);\r\n            }\r\n            HtmlDocument.htmlSpecNamedEntities = htmlNamedEntities;\r\n            HtmlDocument doc;\r\n            <span style=\"color:Blue\">string</span> url;\r\n            target.AutoDetectEncoding = <span style=\"color:Blue\">true</span>;\r\n            <span style=\"color:Green\">//target cdata contains the char '&quot;' and not contains &amp;nbsp;</span>\r\n            url = <span style=\"color:#A31515\">&quot;http://bt.popgo.net/&quot;</span>;\r\n            doc = target.Load(url);\r\n            doc.OptionOutputAsXml = <span style=\"color:Blue\">true</span>;\r\n            HtmlNode cdata = doc.DocumentNode.SelectSingleNode(<span style=\"color:#A31515\">&quot;*//body/div/script&quot;</span>);\r\n            Assert.AreEqual(cdata.WriteTo().Contains(<span style=\"color:#A31515\">&quot;\\&quot;&quot;</span>), <span style=\"color:Blue\">true</span>);\r\n            Assert.AreNotEqual(cdata.InnerText.Contains(<span style=\"color:#A31515\">@&quot;&amp;nbsp;&quot;</span>), <span style=\"color:Blue\">true</span>);\r\n            <span style=\"color:Green\">//target page contains unicode &copy;</span>\r\n            url = <span style=\"color:#A31515\">&quot;http://tlt.its.psu.edu/suggestions/international/web/codehtml.html&quot;</span>;\r\n            doc = target.Load(url);\r\n            doc.OptionOutputAsXml = <span style=\"color:Blue\">true</span>;\r\n            <span style=\"color:Blue\">string</span> content = doc.DocumentNode.WriteTo();\r\n            Assert.AreEqual(content.Contains(<span style=\"color:#A31515\">&quot;&copy;&quot;</span>), <span style=\"color:Blue\">true</span>);\r\n        }\r\nPATHS:(how can i upload files??)</pre>\r\n<pre>HtmlDocument.CS</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre>@@ -41,6 +41,9 @@\r\n \t\t<span style=\"color:Blue\">private</span> Crc32 _crc32 = <span style=\"color:Blue\">null</span>;\r\n \t\t<span style=\"color:Blue\">private</span> <span style=\"color:Blue\">bool</span> _onlyDetectEncoding = <span style=\"color:Blue\">false</span>;\r\n \r\n+        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> System.Collections.Generic.IDictionary&lt;<span style=\"color:Blue\">string</span>, <span style=\"color:Blue\">string</span>&gt; htmlSpecNamedEntities;<span style=\"color:Green\">//for fix entities </span>\r\n+        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">bool</span> OptionEncedeHtmlEntities = <span style=\"color:Blue\">false</span>;<span style=\"color:Green\">//for fix entities</span>\r\n+\r\n \t\t<span style=\"color:Green\">// public props</span>\r\n \r\n \t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n@@ -219,8 +222,8 @@\r\n \t\t\t\t<span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentNullException(<span style=\"color:#A31515\">&quot;html&quot;</span>);\r\n \t\t\t}\r\n \t\t\t<span style=\"color:Green\">// replace &amp; by &amp;amp; but only once!</span>\r\n-\t\t\tRegex rx = <span style=\"color:Blue\">new</span> Regex(<span style=\"color:#A31515\">&quot;&amp;(?!(amp;)|(lt;)|(gt;)|(quot;))&quot;</span>, RegexOptions.IgnoreCase);\r\n-\t\t\t<span style=\"color:Blue\">return</span> rx.Replace(html, <span style=\"color:#A31515\">&quot;&amp;amp;&quot;</span>).Replace(<span style=\"color:#A31515\">&quot;&lt;&quot;</span>, <span style=\"color:#A31515\">&quot;&amp;lt;&quot;</span>).Replace(<span style=\"color:#A31515\">&quot;&gt;&quot;</span>, <span style=\"color:#A31515\">&quot;&amp;gt;&quot;</span>).Replace(<span style=\"color:#A31515\">&quot;\\&quot;&quot;</span>, <span style=\"color:#A31515\">&quot;&amp;quot;&quot;</span>);\r\n+            Regex rx = <span style=\"color:Blue\">new</span> Regex(<span style=\"color:#A31515\">&quot;&amp;(?!(amp;)|(lt;)|(gt;)|(quot;)|(apos;))&quot;</span>, RegexOptions.IgnoreCase);<span style=\"color:Green\">//Regex rx = new Regex(&quot;&amp;(?!(amp;)|(lt;)|(gt;)|(quot;))&quot;, RegexOptions.IgnoreCase);</span>\r\n+            <span style=\"color:Blue\">return</span> rx.Replace(html, <span style=\"color:#A31515\">&quot;&amp;amp;&quot;</span>).Replace(<span style=\"color:#A31515\">&quot;&lt;&quot;</span>, <span style=\"color:#A31515\">&quot;&amp;lt;&quot;</span>).Replace(<span style=\"color:#A31515\">&quot;&gt;&quot;</span>, <span style=\"color:#A31515\">&quot;&amp;gt;&quot;</span>).Replace(<span style=\"color:#A31515\">&quot;\\&quot;&quot;</span>, <span style=\"color:#A31515\">&quot;&amp;quot;&quot;</span>).Replace(<span style=\"color:#A31515\">&quot;'&quot;</span>,<span style=\"color:#A31515\">&quot;&amp;apos;&quot;</span>);<span style=\"color:Green\">//return rx.Replace(html, &quot;&amp;amp;&quot;).Replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;).Replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;).Replace(&quot;\\&quot;&quot;, &quot;&amp;quot;&quot;);</span>\r\n \t\t}\r\n \r\n \t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n@@ -581,6 +584,17 @@\r\n \t\t\t_declaredencoding = <span style=\"color:Blue\">null</span>;\r\n \r\n \t\t\t_text = reader.ReadToEnd();\r\n+\r\n+            <span style=\"color:Blue\">if</span> (OptionEncedeHtmlEntities)<span style=\"color:Green\">//for fix entities</span>\r\n+            {\r\n+                <span style=\"color:Blue\">if</span> (htmlSpecNamedEntities == <span style=\"color:Blue\">null</span>)\r\n+                    <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> ArgumentNullException(<span style=\"color:#A31515\">&quot;HtmlSpecEntitiesMustAssignedBeforeConvertToXml&quot;</span>);\r\n+                <span style=\"color:Blue\">foreach</span> (<span style=\"color:Blue\">var</span> item <span style=\"color:Blue\">in</span> htmlSpecNamedEntities)\r\n+                {\r\n+                    _text = _text.Replace(item.Key, item.Value);\r\n+                }\r\n+            }\r\n+\r\n \t\t\t_documentnode = CreateNode(HtmlNodeType.Document, 0);\r\n \t\t\tParse();\r\n \r\n\r\nHTMLWEB.cs</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre>@@ -472,7 +472,30 @@\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t\t<span style=\"color:Blue\">else</span>\r\n \t\t\t\t\t\t{\r\n-\t\t\t\t\t\t\tdoc.Load(s, <span style=\"color:Blue\">true</span>);\r\n+\t\t\t\t\t\t\t<span style=\"color:Green\">//doc.Load(s, true);</span>\r\n+                            <span style=\"color:Blue\">if</span> (AutoDetectEncoding&amp;&amp;(DefaultEncoding==<span style=\"color:Blue\">null</span>))<span style=\"color:Green\">//attempt to get encoding from web</span>\r\n+                            {\r\n+                                <span style=\"color:Blue\">try</span><span style=\"color:Green\">//attempt to get encoding from response headers</span>\r\n+                                {\r\n+                                    <span style=\"color:Blue\">var</span> rx = <span style=\"color:Blue\">new</span> System.Text.RegularExpressions.Regex(<span style=\"color:#A31515\">&quot;charset=(.+)&quot;</span>);\r\n+                                    <span style=\"color:Blue\">var</span> encodingStr = rx.Match(resp.Headers[<span style=\"color:#A31515\">&quot;Content-Type&quot;</span>]).Groups[1].Value;\r\n+                                    DefaultEncoding = System.Text.Encoding.GetEncoding(encodingStr);\r\n+                                }\r\n+                                <span style=\"color:Blue\">catch</span> { }\r\n+                                <span style=\"color:Blue\">if</span> (DefaultEncoding == <span style=\"color:Blue\">null</span>)<span style=\"color:Green\">//if previous fail,attempt to get encoding from html content</span>\r\n+                                {\r\n+                                    <span style=\"color:Blue\">var</span> _detReq = WebRequest.Create(uri) <span style=\"color:Blue\">as</span> HttpWebRequest;\r\n+                                    <span style=\"color:Blue\">var</span> _detResp = _detReq.GetResponse();\r\n+                                    <span style=\"color:Blue\">using</span> (<span style=\"color:Blue\">var</span> _detRespStream = _detResp.GetResponseStream())\r\n+                                    {\r\n+                                        DefaultEncoding = doc.DetectEncoding(_detRespStream);\r\n+                                    }\r\n+                                    _detResp.Close();\r\n+                                }\r\n+                                <span style=\"color:Blue\">if</span> (DefaultEncoding == <span style=\"color:Blue\">null</span>)<span style=\"color:Green\">//if previous fail,get utf-8 as default encoding</span>\r\n+                                    DefaultEncoding = System.Text.Encoding.Default;\r\n+                            }\r\n+                            doc.Load(s, DefaultEncoding, <span style=\"color:Blue\">true</span>);\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n@@ -803,5 +826,18 @@\r\n \t\t\t\t_usingCache = value;\r\n \t\t\t}\r\n \t\t}\r\n+\r\n+        <span style=\"color:Blue\">private</span> System.Text.Encoding _defaultEncoding;\r\n+        <span style=\"color:Blue\">public</span> System.Text.Encoding DefaultEncoding\r\n+        {\r\n+            <span style=\"color:Blue\">get</span>\r\n+            {\r\n+                <span style=\"color:Blue\">return</span> _defaultEncoding;\r\n+            }\r\n+            <span style=\"color:Blue\">set</span>\r\n+            {\r\n+                _defaultEncoding = value;\r\n+            }\r\n+        }\r\n \t}\r\n }\r\n\r\nHTMLNODE.cs</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre>@@ -1552,7 +1552,13 @@\r\n \t\t\t\t\thtml = ((HtmlTextNode)<span style=\"color:Blue\">this</span>).Text;\r\n \t\t\t\t\t<span style=\"color:Blue\">if</span> (_ownerdocument.OptionOutputAsXml)\r\n \t\t\t\t\t{\r\n-\t\t\t\t\t\toutText.Write(HtmlDocument.HtmlEncode(html));\r\n+                        <span style=\"color:Blue\">if</span> (_cdataText)<span style=\"color:Green\">//fix cdata</span>\r\n+                        {\r\n+                            outText.Write(html);\r\n+                            _cdataText = <span style=\"color:Blue\">false</span>;<span style=\"color:Green\">//fix cdata</span>\r\n+                        }\r\n+                        <span style=\"color:Blue\">else</span><span style=\"color:Green\">//fix cdata</span>\r\n+\t\t\t\t\t\t    outText.Write(HtmlDocument.HtmlEncode(html));\r\n \t\t\t\t\t}\r\n \t\t\t\t\t<span style=\"color:Blue\">else</span>\r\n \t\t\t\t\t{\r\n@@ -1755,6 +1761,7 @@\r\n \t\t\tsw.Flush();\r\n \t\t\t<span style=\"color:Blue\">return</span> sw.ToString();\r\n \t\t}\r\n+        <span style=\"color:Blue\">internal</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">bool</span> _cdataText = <span style=\"color:Blue\">false</span>;<span style=\"color:Green\">//fix cdata </span>\r\n \t}\r\n \r\n }\r\n\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>",
    "PostedDate": "2009-08-02T20:24:33.927-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]