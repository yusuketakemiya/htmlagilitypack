[
  {
    "Id": "597426",
    "ThreadId": "253940",
    "Html": "\r\n<p>I'm in a philosophical argument with someone who is suggesting using an invisible WebBrowser control to parse HTML because it's &quot;easier to understand&quot; than Html Agility Pack. So I proposed this simple HTML file as an example of how cumbersome his approach\r\n would be (ignoring the other problems with that approach):</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">html</span><span style=\"color:blue\">&gt;</span>\r\n\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">body</span><span style=\"color:blue\">&gt;</span>\r\n\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">form</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ol</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">li</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">input</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;checkbox&quot;</span><span style=\"color:blue\">&gt;</span>1!!!<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">input</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">li</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">li</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">input</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;checkbox&quot;</span><span style=\"color:blue\">&gt;</span>2!!!<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">input</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">li</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">ol</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">form</span><span style=\"color:blue\">&gt;</span>\r\n\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">body</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">html</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>I'm an HTML novice (more like I can read it but unfamiliar with forms) so perhaps my HTML is wrong. It renders in a web browser; what a guarantee!</p>\r\n<p>The goal is to get the text displayed by each checkbox. So I wrote this code:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">string</span> source = <span style=\"color:green\">// blah blah</span>\r\n<span style=\"color:blue\">var</span> doc = <span style=\"color:blue\">new</span> HtmlDocument();\r\ndoc.LoadHtml(source);\r\n\r\n<span style=\"color:blue\">var</span> allCheckboxes = doc.DocumentNode.SelectNodes(<span style=\"color:#a31515\">&quot;//input&quot;</span>);\r\n<span style=\"color:blue\">var</span> innerTexts As <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">string</span>&gt;();\r\n<span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> checkbox <span style=\"color:blue\">in</span> allCheckboxes)\r\n{\r\n    innerTexts.Add(checkbox.InnerText);\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>I was surprised to find there's nothing in my list of strings or, more accurately, there's one empty string per checkbox. I poked around and found out that NextSibling is a #text node that contains the text I want, but that seems weird; that node should\r\n be a child of the input element, not a sibling right?</p>\r\n<p>Which is it, an issue with the HtmlAgilityPack or some ignorance of HTML on my part?</p>\r\n",
    "PostedDate": "2011-04-14T12:41:23.617-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "597434",
    "ThreadId": "253940",
    "Html": "<p>This is configurable if you have this code before parsing</p>\r\n<p>HtmlNode.ElementsFlags.Remove(\"input\");&nbsp;</p>\r\n<p>By default input is set to be an empty type and will give you the behavior you are seeing.</p>\r\n<p>HtmlNode.ElementsFlags.Add(\"input\", HtmlElementFlag.Empty);</p>\r\n<p>Here's the full list of these special cases</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>            ElementsFlags = <span style=\"color: blue;\">new</span> Dictionary&lt;<span style=\"color: blue;\">string</span>, HtmlElementFlag&gt;();\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"script\"</span>, HtmlElementFlag.CData);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"style\"</span>, HtmlElementFlag.CData);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"noxhtml\"</span>, HtmlElementFlag.CData);\r\n\r\n            <span style=\"color: green;\">// tags that can not contain other tags</span>\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"base\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"link\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"meta\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"isindex\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"hr\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"col\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"img\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"param\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"embed\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"frame\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"wbr\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"bgsound\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"spacer\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"keygen\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"area\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"input\"</span>, HtmlElementFlag.Empty);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"basefont\"</span>, HtmlElementFlag.Empty);\r\n\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"form\"</span>, HtmlElementFlag.CanOverlap | HtmlElementFlag.Empty);\r\n\r\n            <span style=\"color: green;\">// they sometimes contain, and sometimes they don 't...</span>\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"option\"</span>, HtmlElementFlag.Empty);\r\n\r\n            <span style=\"color: green;\">// tag whose closing tag is equivalent to open tag:</span>\r\n            <span style=\"color: green;\">// &lt;p&gt;bla&lt;/p&gt;bla will be transformed into &lt;p&gt;bla&lt;/p&gt;bla</span>\r\n            <span style=\"color: green;\">// &lt;p&gt;bla&lt;p&gt;bla will be transformed into &lt;p&gt;bla&lt;p&gt;bla and not &lt;p&gt;bla&gt;&lt;/p&gt;&lt;p&gt;bla&lt;/p&gt; or &lt;p&gt;bla&lt;p&gt;bla&lt;/p&gt;&lt;/p&gt;</span>\r\n            <span style=\"color: green;\">//&lt;br&gt; see above</span>\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"br\"</span>, HtmlElementFlag.Empty | HtmlElementFlag.Closed);\r\n            ElementsFlags.Add(<span style=\"color: #a31515;\">\"p\"</span>, HtmlElementFlag.Empty | HtmlElementFlag.Closed);\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-04-14T12:52:50.343-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "597883",
    "ThreadId": "253940",
    "Html": "<p>That invisible control thing does not work. The control needs to be visible on screen for the parser to work. It is for this reason the parsers like this and others were written. Also, they use less memory and execute faster.</p>",
    "PostedDate": "2011-04-15T05:57:24.893-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "598749",
    "ThreadId": "253940",
    "Html": "<p>@darthobiwan: Thanks! That worked just fine.</p>\r\n<p>@kurtnelle: Preaching to the choir here. I don't even like using a <em>visible</em>&nbsp;web browser to parse HTML. But since it's the only built-in way to parse HTML in .NET it's what a lot of newbies stumble upon and no sooner had I pointed out you can parse HTML without a control than someone else popped in and complained that using HTML Agility Pack was \"more complicated\". Lots of fun discussion after that.</p>",
    "PostedDate": "2011-04-17T12:58:46.137-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]