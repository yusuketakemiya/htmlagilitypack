[
  {
    "Id": "215874",
    "ThreadId": "63483",
    "Html": "<p>Hi everyone,</p>\r\n<p>I am new to asp.net. I am trying to use the Html Agility Pack, but it always returns null. Please see my codes below.</p>\r\n<p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;HtmlWeb hw = new HtmlWeb();</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;HtmlDocument doc = hw.Load(strURL);</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;HtmlNodeCollection nodecoll = doc.DocumentNode.SelectNodes(&quot;//div[@class='productTitle']&quot;);</p>\r\n</p>\r\n<p>my nodecoll always returns null.</p>\r\n<p>Any experts please help.</p>\r\n<p>Thanks,</p>\r\n<p>&nbsp;</p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">HtmlWeb hw = new HtmlWeb();</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;HtmlDocument doc = hw.Load(strURL);</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//string path = &quot;//td[@class='details']&quot;;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;HtmlNodeCollection nodecollHtmlWeb hw = new HtmlWeb();</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;HtmlDocument doc = hw.Load(strURL);</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//string path = &quot;//td[@class='details']&quot;;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;HtmlNodeCollection nodecoll = doc.DocumentNode.SelectNodes(&quot;//div[@class='productTitle']&quot;);&nbsp;= doc.DocumentNode.SelectNodes(&quot;//div[@class='productTitle']&quot;);</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-24T14:56:09.693-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "215986",
    "ThreadId": "63483",
    "Html": "<p>Based on your code, this is what I would expect to be a problem</p>\r\n<ol>\r\n<li>There&nbsp;are no div element(s) with a class attribute with value &quot;productTitle&quot;.</li>\r\n<li>The source HTML&nbsp;(from strURL) is malformed. Eg.: &lt;script&gt;-tags ends with /&gt; and not &lt;/script&gt;. This causes everything after&nbsp; the (first?)&nbsp;opening script-tag to be swallowed. The script tag will be closed by HtmlAgilityPack, and any other element before the script-tag is also closed.</li>\r\n<li>The webserver doesnt accept HtmlWeb's request. Eg.: the server script requires the User-Agent header or another header to be set, and gives you some other HTML instead of the HTML you expect.</li>\r\n</ol>\r\n<p>You can use this class to save whatever HtmlDocument think it sees.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.IO;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n<span style=\"color:Blue\">using</span> System.Xml;\r\n<span style=\"color:Blue\">using</span> HtmlAgilityPack;\r\n\r\n<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> HtmlAgilityPackHelper\r\n</span>{\r\n    <span style=\"color:Blue\">#region</span> Public static methods: Save(HtmlDocument), Save(HtmlNode) + overloads.\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> Save( <span style=\"color:Blue\">string</span> path, HtmlDocument document )\r\n    {\r\n        Save( path, document, <span style=\"color:Blue\">false</span> );\r\n    }\r\n\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Saves the &lt;see cref=&quot;HtmlDocument&quot;/&gt; to the specified path.</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;path&quot;&gt;</span><span style=\"color:Green\">The file to write to.&lt;/param&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;document&quot;&gt;</span><span style=\"color:Green\">The &lt;see cref=&quot;HtmlDocument&quot;/&gt; to save.&lt;/param&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;asXml&quot;&gt;</span><span style=\"color:Green\">if set to &lt;c&gt;true&lt;/c&gt; save document as XML.&lt;/param&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;seealso cref=&quot;HtmlNode&quot;/&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;see cref=&quot;HtmlDocument&quot;/&gt;</span>\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> Save( <span style=\"color:Blue\">string</span> path, HtmlDocument document, <span style=\"color:Blue\">bool</span> asXml )\r\n    {\r\n        <span style=\"color:Blue\">if</span>( path == <span style=\"color:Blue\">null</span> || document == <span style=\"color:Blue\">null</span> )\r\n        {\r\n            DebugBreakOrThrow( <span style=\"color:#A31515\">&quot;Figure out why &quot;</span> + (path == <span style=\"color:Blue\">null</span> ? <span style=\"color:#A31515\">&quot;path&quot;</span> : <span style=\"color:#A31515\">&quot;document&quot;</span>) + <span style=\"color:#A31515\">&quot;is null&quot;</span>, <span style=\"color:Blue\">new</span> ArgumentNullException( path == <span style=\"color:Blue\">null</span> ? <span style=\"color:#A31515\">&quot;path&quot;</span> : <span style=\"color:#A31515\">&quot;document&quot;</span> ) );\r\n        }\r\n\r\n        <span style=\"color:Green\">// DeclaredEncoding is set if document.OptionReadEncoding is true, and a valid Content-Type is found.</span>\r\n        <span style=\"color:Green\">// When the OptionReadEncoding is true, HtmlDocument tries to find the encoding by reading the &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;.</span>\r\n        <span style=\"color:Green\">// If it's null, we use the default.</span>\r\n        <span style=\"color:Blue\">using</span>( FileStream fileStream = <span style=\"color:Blue\">new</span> FileStream( path, FileMode.Create, FileAccess.Write, FileShare.Read, 1024 ) )\r\n        {\r\n            <span style=\"color:Blue\">using</span>( StreamWriter streamWriter = <span style=\"color:Blue\">new</span> StreamWriter( fileStream, document.DeclaredEncoding ?? document.Encoding ) )\r\n            {\r\n                <span style=\"color:Blue\">if</span>( asXml )\r\n                {\r\n                    XmlWriterSettings settings = <span style=\"color:Blue\">new</span> XmlWriterSettings();\r\n                    settings.Encoding = document.DeclaredEncoding ?? document.Encoding;\r\n                    settings.Indent = <span style=\"color:Blue\">true</span>;\r\n                    settings.CloseOutput = <span style=\"color:Blue\">true</span>;\r\n                    settings.OmitXmlDeclaration = <span style=\"color:Blue\">true</span>;\r\n                    settings.NewLineOnAttributes = <span style=\"color:Blue\">true</span>;\r\n                    settings.CheckCharacters = <span style=\"color:Blue\">true</span>;\r\n\r\n                    settings.ConformanceLevel = ConformanceLevel.Fragment;\r\n\r\n                    document.Save( XmlWriter.Create( streamWriter, settings ) );\r\n                }\r\n                <span style=\"color:Blue\">else</span>\r\n                {\r\n                    document.Save( streamWriter );\r\n                }\r\n\r\n                streamWriter.Flush();\r\n            }\r\n        }\r\n    }\r\n\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Saves the &lt;see cref=&quot;HtmlDocument&quot;/&gt; to the specified path.</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;path&quot;&gt;</span><span style=\"color:Green\">The file to write to.&lt;/param&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;node&quot;&gt;</span><span style=\"color:Green\">The &lt;see cref=&quot;HtmlNode&quot;/&gt; to save.&lt;/param&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;remarks&gt;</span><span style=\"color:Green\">This method will use the &lt;see cref=&quot;HtmlNode.OwnerDocument&quot;&gt;HtmlNode.OwnerDocument&lt;/see&gt; to determine which encoding to use.&lt;/remarks&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> &lt;seealso cref=&quot;Save(string, HtmlNode, Encoding)&quot;/&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;seealso cref=&quot;HtmlNode&quot;/&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;see cref=&quot;HtmlDocument&quot;/&gt;</span>\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> Save( <span style=\"color:Blue\">string</span> path, HtmlNode node )\r\n    {\r\n        <span style=\"color:Blue\">if</span>( path == <span style=\"color:Blue\">null</span> || node == <span style=\"color:Blue\">null</span> )\r\n        {\r\n            DebugBreakOrThrow( <span style=\"color:#A31515\">&quot;Figure out why &quot;</span> + (path == <span style=\"color:Blue\">null</span> ? <span style=\"color:#A31515\">&quot;path&quot;</span> : <span style=\"color:#A31515\">&quot;node&quot;</span>) + <span style=\"color:#A31515\">&quot;is null&quot;</span>, <span style=\"color:Blue\">new</span> ArgumentNullException( path == <span style=\"color:Blue\">null</span> ? <span style=\"color:#A31515\">&quot;path&quot;</span> : <span style=\"color:#A31515\">&quot;node&quot;</span> ) );\r\n        }\r\n\r\n        Save( path, node, node.OwnerDocument.DeclaredEncoding ?? node.OwnerDocument.Encoding );\r\n    }\r\n\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Saves the &lt;see cref=&quot;HtmlDocument&quot;/&gt; to the specified path.</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;path&quot;&gt;</span><span style=\"color:Green\">The file to write to.&lt;/param&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;node&quot;&gt;</span><span style=\"color:Green\">The &lt;see cref=&quot;HtmlNode&quot;/&gt; to save.&lt;/param&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;encoding&quot;&gt;</span><span style=\"color:Green\">The encoding to use when writing the file.&lt;/param&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;seealso cref=&quot;HtmlNode&quot;/&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;see cref=&quot;HtmlDocument&quot;/&gt;</span>\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> Save( <span style=\"color:Blue\">string</span> path, HtmlNode node, Encoding encoding )\r\n    {\r\n        <span style=\"color:Blue\">if</span>( path == <span style=\"color:Blue\">null</span> || node == <span style=\"color:Blue\">null</span> )\r\n        {\r\n            DebugBreakOrThrow( <span style=\"color:#A31515\">&quot;Figure out why &quot;</span> + (path == <span style=\"color:Blue\">null</span> ? <span style=\"color:#A31515\">&quot;path&quot;</span> : <span style=\"color:#A31515\">&quot;node&quot;</span>) + <span style=\"color:#A31515\">&quot;is null&quot;</span>, <span style=\"color:Blue\">new</span> ArgumentNullException( path == <span style=\"color:Blue\">null</span> ? <span style=\"color:#A31515\">&quot;path&quot;</span> : <span style=\"color:#A31515\">&quot;node&quot;</span> ) );\r\n        }\r\n\r\n        <span style=\"color:Green\">// Will only be triggered if the caller isn't called by another Save().</span>\r\n        <span style=\"color:Blue\">if</span>( encoding == <span style=\"color:Blue\">null</span> )\r\n        {\r\n            DebugBreakOrThrow( <span style=\"color:#A31515\">&quot;Figure out why encoding is null.&quot;</span>, <span style=\"color:Blue\">new</span> ArgumentNullException( <span style=\"color:#A31515\">&quot;encoding&quot;</span> ) );\r\n        }\r\n\r\n        <span style=\"color:Blue\">using</span>( FileStream fileStream = <span style=\"color:Blue\">new</span> FileStream( path, FileMode.Create, FileAccess.Write, FileShare.Read, 1024 ) )\r\n        {\r\n            <span style=\"color:Blue\">using</span>( StreamWriter streamWriter = <span style=\"color:Blue\">new</span> StreamWriter( fileStream, encoding ) )\r\n            {\r\n                <span style=\"color:Green\">// StreamWriter is a TextWriter, so we can pass it to HtmlNode.WriteContentTo(TextWriter).</span>\r\n                <span style=\"color:Green\">// So node.WriteTo only saves the current node, which is only useful if the node has no children.</span>\r\n                <span style=\"color:Green\">// node.WriteContentTo, only saves the current nodes children, therefore if the current node has a parent, we use the parent to save.</span>\r\n                <span style=\"color:Green\">// this will include all siblings aswell :S</span>\r\n                <span style=\"color:Blue\">if</span>( node.ParentNode != <span style=\"color:Blue\">null</span> )\r\n                {\r\n                    node.ParentNode.WriteContentTo( streamWriter );\r\n                }\r\n                <span style=\"color:Blue\">else</span> <span style=\"color:Blue\">if</span>( node.HasChildNodes == <span style=\"color:Blue\">false</span> )\r\n                {\r\n                    node.WriteTo( streamWriter );\r\n                }\r\n                <span style=\"color:Blue\">else</span> <span style=\"color:Blue\">if</span>( node.Name == HtmlNode.HtmlNodeTypeNameDocument )\r\n                {\r\n                    node.WriteContentTo( streamWriter );\r\n                }\r\n                <span style=\"color:Blue\">else</span>\r\n                {\r\n                    <span style=\"color:Green\">// TODO: Properly save parent-less node with children.</span>\r\n                    DebugBreakOrThrow( <span style=\"color:#A31515\">&quot;Properly save parent-less node with children. Inspect 'node'.&quot;</span>, <span style=\"color:Blue\">new</span> InvalidOperationException( <span style=\"color:#A31515\">&quot;Don't know how to save the node, and it's children!&quot;</span> ) );\r\n                }\r\n\r\n                streamWriter.Flush();\r\n            }\r\n        }\r\n    }\r\n    <span style=\"color:Blue\">#endregion</span>\r\n\r\n    <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> DebugBreakOrThrow( <span style=\"color:Blue\">string</span> What_needs_to_be_checked_at_this_point, Exception exception )\r\n    {\r\n        <span style=\"color:Blue\">if</span>( System.Diagnostics.Debugger.IsAttached )\r\n        {\r\n            <span style=\"color:Green\">// Open the Call-stack toolwindow: Debug -&gt; Windows -&gt; Call Stack. Double-click the next item in the list.</span>\r\n            System.Diagnostics.Debugger.Log( 1, <span style=\"color:#A31515\">&quot;HtmlAgilityPackHelper -&gt; DebugBreakOrThrow()&quot;</span>, <span style=\"color:#A31515\">&quot;Supplied message: &quot;</span> + What_needs_to_be_checked_at_this_point ?? <span style=\"color:#A31515\">&quot;None-supplied&quot;</span> );\r\n            System.Diagnostics.Debugger.Break();\r\n        }\r\n        <span style=\"color:Blue\">else</span>\r\n        {\r\n            <span style=\"color:Blue\">throw</span> exception;\r\n        }\r\n    }\r\n}\r\n</pre>\r\n<pre>You can use it like this:</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> Main(<span style=\"color:Blue\">string</span>[] args)\r\n{\r\n    HtmlWeb hw = <span style=\"color:Blue\">new</span> HtmlWeb();\r\n\r\n    HtmlDocument doc = hw.Load( strURL );\r\n    HtmlAgilityPackHelper.Save( <span style=\"color:#A31515\">&quot;parsed-html.txt&quot;</span>, doc );\r\n    MessageBox.Show(<span style=\"color:#A31515\">&quot;HTML is located: &quot;</span> + <span style=\"color:Blue\">new</span> FileInfo(<span style=\"color:#A31515\">&quot;parsed-html.txt&quot;</span>).FullName +);\r\n\r\n    HtmlNodeCollection nodecoll = doc.DocumentNode.SelectNodes( <span style=\"color:#A31515\">&quot;//div[@class='productTitle']&quot;</span> );\r\n}\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>",
    "PostedDate": "2009-07-25T05:36:20.58-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216409",
    "ThreadId": "63483",
    "Html": "<p>thank you so much Coolspin,</p>\r\n<p>I will put this code in my project and try it. I will let you know how it goes.</p>\r\n<p>Thanks again,</p>",
    "PostedDate": "2009-07-27T08:36:17.473-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216417",
    "ThreadId": "63483",
    "Html": "<p>Hi CoolSpin,</p>\r\n<p>After I run your code, the save file does not show [@class='productTitle']. I guess it should be the problem #3 as you mentioned earlier.</p>\r\n<p>Could you please explain how to setup the header?</p>\r\n<p>Thanks,</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-27T08:59:34.817-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "218439",
    "ThreadId": "63483",
    "Html": "<p>The method that creates the WebRequest object is the private method</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">private</span> HttpStatusCode Get(Uri uri, <span style=\"color:Blue\">string</span> method, <span style=\"color:Blue\">string</span> path, HtmlDocument doc)\r\n</pre>\r\n</div>\r\n<p>You can set custom headers on the req-object's Headers-property:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>req.Headers.Add(HttpRequestHeader.UserAgent, <span style=\"color:#A31515\">&quot;Hello World Browser/1.0.0.0&quot;</span>);\r\n</pre>\r\n</div>\r\n<p>You can also use WebRequest.Create(...) yourself, and pass the GetResponseStream()&nbsp; on the HttpWebResponse object returned from req.GetResponse(), to HtmlDocument.Load(stream);. But then you must yourself check for Content-Type headers and if they are present, you should tell the Load() method what encoding to use. You should assume the server knows what it's sending, unless overridden inside the HTML with a META HTTP-EQUIV=&quot;Content-Type&quot;.<br><br><br></p>",
    "PostedDate": "2009-08-02T03:58:01.273-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "218849",
    "ThreadId": "63483",
    "Html": "<p>Thank you so much CoolSpin for the example. I will try to apply this codes and let you know how it works out.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks again for a reply.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-03T09:32:17.86-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "233499",
    "ThreadId": "63483",
    "Html": "<p>Hi, all.</p>\r\n<p>I think it is not good practice to return null.</p>\r\n<p>Empty collection pattern is better.</p>",
    "PostedDate": "2009-09-11T03:45:47.017-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "286145",
    "ThreadId": "63483",
    "Html": "<p>best practice to have a generic null of the node collection type. to avoid certain scenarios where exceptions can be thrown.&nbsp; but not in all cases would i not want to have an exception thrown.</p>\r\n<p>lets take this case for example, i need to fix this code...&nbsp; nevertheless, the xpath is right.&nbsp; i also added the correct http header in my object DownloadHtml.&nbsp; i bolded the line where the error occurs.</p>\r\n<p>System.ArgumentNullException was unhandled<br>&nbsp; Message=&quot;Value cannot be null.\\r\\nParameter name: source&quot;<br>&nbsp; Source=&quot;System.Core&quot;<br>&nbsp; ParamName=&quot;source&quot;<br>&nbsp; StackTrace:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Linq.Enumerable.Select[TSource,TResult](IEnumerable`1 source, Func`2 selector)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at GoogleTrends.Form1.button1_Click(Object sender, EventArgs e) in C:\\Users\\Daniel\\Documents\\Visual Studio 2008\\Projects\\GoogleTrends\\GoogleTrends\\Form1.cs:line 32<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.Control.OnClick(EventArgs e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.Button.OnClick(EventArgs e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.Control.WmMouseUp(Message&amp; m, MouseButtons button, Int32 clicks)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.Control.WndProc(Message&amp; m)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.ButtonBase.WndProc(Message&amp; m)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.Button.WndProc(Message&amp; m)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp; m)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp; m)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp; msg)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Forms.Application.Run(Form mainForm)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at GoogleTrends.Program.Main() in C:\\Users\\Daniel\\Documents\\Visual Studio 2008\\Projects\\GoogleTrends\\GoogleTrends\\Program.cs:line 18<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ThreadHelper.ThreadStart_Context(Object state)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ThreadHelper.ThreadStart()<br>&nbsp; InnerException:</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<pre>private void button1_Click(object sender, EventArgs e)<br>        {<br>            string xpath = @&quot;/html/body/center/table/tbody/tr[3]/td/table/tbody/tr/td[3]/table[3]/tbody/tr/td/table/tbody/tr/td&quot;;<br>            string url = @&quot;http://www.google.com/trends&quot;;<br><br>            string html = DownloadHtml.GetHtmlFromUrl(new Uri(url));<br><br><br>            HtmlAgilityPack.HtmlDocument hdoc = new HtmlAgilityPack.HtmlDocument();<br>            hdoc.LoadHtml(html);<br>            HtmlAgilityPack.HtmlNodeCollection nodeCol = hdoc.DocumentNode.SelectNodes(xpath);<br><br>         <strong>   var result = from v in nodeCol<br></strong>                         select new GTrends<br>                         {<br>                             myItem= v.WriteTo(),<br>                             Website=&quot;Google Trends&quot;<br>                         };<br>            dataGridView1.DataSource = result;<br>            dataGridView1.Update();<br>            <br>            <br><br>        }</pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>-------</p>\r\n<p>DownloadHtml.cs</p>\r\n<p>---------</p>\r\n<p>&nbsp;</p>\r\n<pre>using System;<br>using System.Data;<br>using System.Configuration;<br>using System.Linq;<br>using System.Web;<br><br>using System.Xml.Linq;<br>using System.Net;<br>using System.Text;<br>using System.IO;<br><br><br><br>namespace GoogleTrends<br>{<br><br><br><br><br>    /// <br>    /// Summary description for DownloadHtml<br>    /// <br>    public static class DownloadHtml<br>    {<br><br><br>        public static string GetHtmlFromUrl(Uri url)<br>        {<br>            string html = string.Empty;<br>            HttpWebRequest request = GenerateHttpWebRequest(url);<br>            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())<br>            {<br>                if (CategorizeResponse(response) == ResponseCategories.Success)<br>                {<br>                    Stream responseStream = response.GetResponseStream();<br>                    using (StreamReader reader = new StreamReader(responseStream, Encoding.UTF8))<br>                    {<br>                        html = reader.ReadToEnd();<br>                    }<br>                }<br>            }<br>            return html;<br>        }<br><br>        public static HttpWebRequest GenerateHttpWebRequest(Uri uri)<br>        {<br><br>            //all this mess below is my attempt to resolve some of the issues in taking on various conflicts in httpreqeust.<br>            //code is left in<br>            //if infact requests vary may need to switch(key) on differnet sites?<br><br>            HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create(uri);<br><br>            httpRequest.UserAgent = &quot;Mozilla/4.0 (compatible; MSIE 6.0b; Windows NT 5.0)&quot;;<br><br>            CookieContainer cc = new CookieContainer();<br>            httpRequest.CookieContainer = cc;//must assing a cookie container for the request to pull the cookies<br><br>            httpRequest.AllowAutoRedirect = true;   //example, Hanes.com<br><br>            httpRequest.Credentials = CredentialCache.DefaultCredentials;<br><br>          <strong>  httpRequest.Headers.Add(&quot;HTTP_USER_AGENT&quot;, @&quot;Mozilla/5.0(PC) (Windows; U; Windows NT 5.1; en-US; rv:1.8.0.4) Gecko/20060508 Firefox/1.5.0.4&quot;);<br><br></strong><br>            //   httpRequest.Headers.Add(&quot;Agent&quot;, &quot;Mozilla/5.0(PC) (Windows; U; Windows NT 5.1; en-US; rv:1.8.0.4) Gecko/20060508 Firefox/1.5.0.4&quot;);<br>            //   httpRequest.Headers.Add(&quot;Accept-Charset&quot;, &quot;ISO-8859-1&quot;);<br>            /*<br><br>            httpRequest.Headers.Add(&quot;Accept-Language&quot;, &quot;en-us,en;q=0.5&quot;);<br>            httpRequest.Headers.Add(&quot;Accept-Encoding&quot;, &quot;gzip,deflate&quot;);<br>            httpRequest.Headers.Add(&quot;Accept-Charset&quot;, &quot;ISO-8859-1,utf-8;q=0.7,*;q=0.7&quot;);<br><br><br>          //  httpRequest.Headers.Add(&quot;Set-Cookie&quot;, response.Headers(&quot;Set-Cookie&quot;));<br>            httpRequest.Headers.Add(&quot;Agent&quot;, &quot;Mozilla//5.0 (X11; U; Linux i686; en-US; ry; 1.8.0.7) Geck//20060925 Firefox//1.5.0.7&quot;);<br>            */<br><br><br>            return httpRequest;<br>        }<br><br>        public static HttpWebRequest GenerateHttpWebRequest(Uri uri, string postData, string contentType)<br>        {<br>            HttpWebRequest httpRequest = GenerateHttpWebRequest(uri);<br><br>            byte[] bytes = Encoding.UTF8.GetBytes(postData);<br><br>            httpRequest.ContentLength = postData.Length;<br><br>            using (Stream requestStream = httpRequest.GetRequestStream())<br>            {<br>                requestStream.Write(bytes, 0, bytes.Length);<br>            }<br><br>            return httpRequest;<br>        }<br><br>        public static HttpWebRequest AddProxyInfoToRequest(HttpWebRequest httpRequest, Uri proxyUri, string proxyId, string proxyPassword, string proxyDomain)<br>        {<br>            if (httpRequest != null)<br>            {<br><br>                WebProxy proxyInfo = new WebProxy();<br>                proxyInfo.Address = proxyUri;<br>                proxyInfo.BypassProxyOnLocal = true;<br>                proxyInfo.Credentials = new NetworkCredential(proxyId, proxyPassword, proxyDomain);<br>                httpRequest.Proxy = proxyInfo;<br><br>            }<br>            return httpRequest;<br>        }<br><br>        public static ResponseCategories CategorizeResponse(HttpWebResponse httpResponse)<br>        {<br>            //Just incase there are more success codes defined in the future by<br>            // HttpStatusCode, We will checkf or the &quot;success&quot; ranges<br>            // instead of using teh HttpStatusCode enum as it overloads some values.<br><br>            int statusCode = (int)httpResponse.StatusCode;<br><br>            if ((statusCode &gt;= 100) &amp;&amp; (statusCode &lt;= 199))<br>            {<br>                return ResponseCategories.Informational;<br>            }<br>            else if ((statusCode &gt;= 200) &amp;&amp; (statusCode &lt;= 299))<br>            {<br>                return ResponseCategories.Success;<br>            }<br>            else if ((statusCode &gt;= 300) &amp;&amp; (statusCode &lt;= 399))<br>            {<br>                return ResponseCategories.Redirected;<br>            }<br>            else if ((statusCode &gt;= 400) &amp;&amp; (statusCode &lt;= 499))<br>            {<br>                return ResponseCategories.ClientError;<br>            }<br>            else if ((statusCode &gt;= 500) &amp;&amp; (statusCode &lt;= 599))<br>            {<br>                return ResponseCategories.ServerError;<br>            }<br>            return ResponseCategories.Unknown;<br>        }<br><br><br>        public enum ResponseCategories<br>        {<br>            Unknown, // Unknown code ( &lt; 100 or &gt; 599 )<br>            Informational, //Informational codes (100 &gt;=199)<br>            Success, // success codes (200 &gt;= 299)<br>            Redirected, //Redirection code (300, 399)<br>            ClientError, // Client error code (400 &gt;= 499)<br>            ServerError//Server Error Code (500,599 )<br><br>        }<br><br><br>    }<br>}</pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>----------------</p>\r\n<p>something i might be missing?</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-02-05T01:51:51.25-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]